// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BdlProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from BdlProto.proto</summary>
public static partial class BdlProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for BdlProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BdlProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5CZGxQcm90by5wcm90byJMChJDb3VudERvd25Ccm9hZENhc3QSJQoNY291",
          "bnREb3duVHlwZRgBIAEoDjIOLkNvdW50RG93blR5cGUSDwoHc2Vjb25kcxgC",
          "IAEoBSJZChBLZWVwYWxpdmVSZXF1ZXN0EhAKCGRldmljZUlkGAEgASgJEh8K",
          "CmRldmljZVR5cGUYAiABKA4yCy5EZXZpY2VUeXBlEhIKCmNsaWVudFRpbWUY",
          "AyABKAkibgoRS2VlcGFsaXZlUmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkS",
          "HwoKZGV2aWNlVHlwZRgCIAEoDjILLkRldmljZVR5cGUSEgoKY2xpZW50VGlt",
          "ZRgDIAEoCRISCgpzZXJ2ZXJUaW1lGAQgASgJIlsKEkN1cnJlbnRUaW1lUmVx",
          "dWVzdBIQCghkZXZpY2VJZBgBIAEoCRIfCgpkZXZpY2VUeXBlGAIgASgOMgsu",
          "RGV2aWNlVHlwZRISCgpjbGllbnRUaW1lGAMgASgJIpsBChNDdXJyZW50VGlt",
          "ZVJlc3BvbnNlEhAKCGRldmljZUlkGAEgASgJEh8KCmRldmljZVR5cGUYAiAB",
          "KA4yCy5EZXZpY2VUeXBlEhIKCmNsaWVudFRpbWUYAyABKAkSJQoNY291bnRE",
          "b3duVHlwZRgEIAEoDjIOLkNvdW50RG93blR5cGUSFgoOY3VycmVudFNlY29u",
          "ZHMYBSABKAUiYQoMTG9naW5SZXF1ZXN0EgsKA3VpZBgBIAEoCRIfCgpkZXZp",
          "Y2VUeXBlGAIgASgOMgsuRGV2aWNlVHlwZRIjCgxhY3Rpdml0eVR5cGUYAyAB",
          "KA4yDS5BY3Rpdml0eVR5cGUimwQKDUxvZ2luUmVzcG9uc2USCwoDdWlkGAEg",
          "ASgJEiIKDWRldmljZVR5cGVBcnIYAiADKA4yCy5EZXZpY2VUeXBlEiMKDGFj",
          "dGl2aXR5VHlwZRgDIAEoDjINLkFjdGl2aXR5VHlwZRIVCg1leGlzaXRTZXR0",
          "aW5nGAQgASgIEh0KCXRyYWluTW9kZRgFIAEoDjIKLlRyYWluTW9kZRIXCg9k",
          "ZWZhdE1vZGVFbmFibGUYBiABKAgSEgoKc2VhdEhlaWdodBgHIAEoBRIUCgxi",
          "YWNrRGlzdGFuY2UYCCABKAUSEwoLbGV2ZXJMZW5ndGgYCSABKAUSFAoMZm9y",
          "d2FyZExpbWl0GAogASgFEhEKCWJhY2tMaW1pdBgLIAEoBRISCgpsZXZlckFu",
          "Z2xlGAwgASgBEhQKDGZvcndhcmRGb3JjZRgNIAEoARIUCgxyZXZlcnNlRm9y",
          "Y2UYDiABKAESDQoFcG93ZXIYDyABKAESEAoIY291cnNlSWQYEiABKAMSEgoK",
          "YWN0aXZpdHlJZBgTIAEoAxIYChBhY3Rpdml0eVJlY29yZElkGBQgASgDEhUK",
          "DXBlZGFsRGlzdGFuY2UYFSABKAUSEgoKc3lzVmVyc2lvbhgWIAEoBRIWCg5o",
          "ZWFydF9yYXRlX21heBgXIAEoBRIOCgZyb2xlSWQYGCABKAUSDgoGd2VpZ2h0",
          "GBkgASgBEgsKA2FnZRgaIAEoBSK+AwoNVXBsb2FkUmVxdWVzdBILCgN1aWQY",
          "ASABKAkSHwoKZGV2aWNlVHlwZRgCIAEoDjILLkRldmljZVR5cGUSIwoMYWN0",
          "aXZpdHlUeXBlGAMgASgOMg0uQWN0aXZpdHlUeXBlEh0KCXRyYWluTW9kZRgE",
          "IAEoDjIKLlRyYWluTW9kZRIXCg9kZWZhdE1vZGVFbmFibGUYBSABKAgSFAoM",
          "cmV2ZXJzZUZvcmNlGAYgASgBEhQKDGZvcndhcmRGb3JjZRgHIAEoARINCgVw",
          "b3dlchgIIAEoARITCgtmaW5pc2hDb3VudBgJIAEoBRIVCg1maW5hbERpc3Rh",
          "bmNlGAsgASgBEg8KB2NhbG9yaWUYDCABKAESEQoJdHJhaW5UaW1lGA0gASgF",
          "EhYKDmhlYXJ0X3JhdGVfYXZnGA4gASgFEhYKDmhlYXJ0X3JhdGVfbWF4GA8g",
          "ASgFEhYKDmhlYXJ0X3JhdGVfbWluGBAgASgFEhAKCGNvdXJzZUlkGBEgASgD",
          "EhIKCmFjdGl2aXR5SWQYEiABKAMSGAoQYWN0aXZpdHlSZWNvcmRJZBgTIAEo",
          "AxIPCgdkYXRhX2lkGBQgASgJIpcBCg5VcGxvYWRSZXNwb25zZRILCgN1aWQY",
          "ASABKAkSHwoKZGV2aWNlVHlwZRgCIAEoDjILLkRldmljZVR5cGUSIwoMYWN0",
          "aXZpdHlUeXBlGAQgASgOMg0uQWN0aXZpdHlUeXBlEhAKCGZpbmlzaGVkGAUg",
          "ASgIEg8KB3N1Y2Nlc3MYBiABKAgSDwoHZGF0YV9pZBgHIAEoCSKlBAoHTWVz",
          "c2FnZRIXCgR0eXBlGAEgASgOMgkuSGVhZFR5cGUSEAoIc2VxdWVuY2UYAiAB",
          "KAUSKwoQa2VlcGFsaXZlUmVxdWVzdBgDIAEoCzIRLktlZXBhbGl2ZVJlcXVl",
          "c3QSLQoRa2VlcGFsaXZlUmVzcG9uc2UYBCABKAsyEi5LZWVwYWxpdmVSZXNw",
          "b25zZRIjCgxsb2dpblJlcXVlc3QYBSABKAsyDS5Mb2dpblJlcXVlc3QSJQoN",
          "bG9naW5SZXNwb25zZRgGIAEoCzIOLkxvZ2luUmVzcG9uc2USJQoNdXBsb2Fk",
          "UmVxdWVzdBgHIAEoCzIOLlVwbG9hZFJlcXVlc3QSJwoOdXBsb2FkUmVzcG9u",
          "c2UYCCABKAsyDy5VcGxvYWRSZXNwb25zZRIvChJwZXJzb25hbFNldFJlcXVl",
          "c3QYCSABKAsyEy5QZXJzb25hbFNldFJlcXVlc3QSMQoTcGVyc29uYWxTZXRS",
          "ZXNwb25zZRgKIAEoCzIULlBlcnNvbmFsU2V0UmVzcG9uc2USLwoSY291bnRE",
          "b3duQnJvYWRDYXN0GAsgASgLMhMuQ291bnREb3duQnJvYWRDYXN0Ei8KEmN1",
          "cnJlbnRUaW1lUmVxdWVzdBgMIAEoCzITLkN1cnJlbnRUaW1lUmVxdWVzdBIx",
          "ChNjdXJyZW50VGltZVJlc3BvbnNlGA0gASgLMhQuQ3VycmVudFRpbWVSZXNw",
          "b25zZSLDAgoSUGVyc29uYWxTZXRSZXF1ZXN0EgsKA3VpZBgBIAEoCRIfCgpk",
          "ZXZpY2VUeXBlGAIgASgOMgsuRGV2aWNlVHlwZRIjCgxhY3Rpdml0eVR5cGUY",
          "AyABKA4yDS5BY3Rpdml0eVR5cGUSEgoKc2VhdEhlaWdodBgEIAEoBRIUCgxi",
          "YWNrRGlzdGFuY2UYBSABKAUSEwoLbGV2ZXJMZW5ndGgYBiABKAUSEgoKbGV2",
          "ZXJBbmdsZRgHIAEoARIUCgxmb3J3YXJkTGltaXQYCCABKAUSEQoJYmFja0xp",
          "bWl0GAkgASgFEh0KCXRyYWluTW9kZRgKIAEoDjIKLlRyYWluTW9kZRIXCg9k",
          "ZWZhdE1vZGVFbmFibGUYCyABKAgSFQoNcGVkYWxEaXN0YW5jZRgMIAEoBRIP",
          "CgdkYXRhX2lkGA0gASgJIooBChNQZXJzb25hbFNldFJlc3BvbnNlEh8KCmRl",
          "dmljZVR5cGUYASABKA4yCy5EZXZpY2VUeXBlEiMKDGFjdGl2aXR5VHlwZRgC",
          "IAEoDjINLkFjdGl2aXR5VHlwZRILCgN1aWQYAyABKAkSDwoHc3VjY2VzcxgE",
          "IAEoCBIPCgdkYXRhX2lkGAUgASgJKiYKDUNvdW50RG93blR5cGUSCwoHUlVO",
          "TklORxAAEggKBFNUT1AQASqIAgoISGVhZFR5cGUSFQoRS2VlcGFsaXZlX1Jl",
          "cXVlc3QQABIWChJLZWVwYWxpdmVfUmVzcG9uc2UQARIRCg1Mb2dpbl9SZXF1",
          "ZXN0EAISEgoOTG9naW5fUmVzcG9uc2UQAxISCg5VcGxvYWRfUmVxdWVzdBAE",
          "EhMKD1VwbG9hZF9SZXNwb25zZRAFEhcKE0NvdW50RG93bl9Ccm9hZENhc3QQ",
          "BhIXChNQZXJzb25hbFNldF9SZXF1ZXN0EAcSGAoUUGVyc29uYWxTZXRfUmVz",
          "cG9uc2UQCBIXChNDdXJyZW50VGltZV9SZXF1ZXN0EAkSGAoUQ3VycmVudFRp",
          "bWVfUmVzcG9uc2UQCiqUAQoJVHJhaW5Nb2RlEhEKDVNUQU5EQVJEX01PREUQ",
          "ABIQCgxBREFQVEVSX01PREUQARIUChBDT05TVF9TUEVFRF9NT0RFEAISEwoP",
          "SEVBUlRfUkFURV9NT0RFEAMSFAoQQUREX01VU0NMRVNfTU9ERRAEEg8KC0FD",
          "VElWRV9NT0RFEAUSEAoMUEFTU0lWRV9NT0RFEAYqpQEKCkRldmljZVR5cGUS",
          "BwoDUDAwEAASBwoDUDAxEAESBwoDUDAyEAISBwoDUDAzEAMSBwoDUDA0EAQS",
          "BwoDUDA1EAUSBwoDUDA2EAYSBwoDUDA3EAcSBwoDUDA4EAgSBwoDUDA5EAkS",
          "BwoDRTEwEAoSBwoDRTExEAsSBwoDRTEyEAwSBwoDRTEzEA0SBwoDRTE0EA4S",
          "BwoDRTE1EA8SBwoDRTE2EBAqMgoMQWN0aXZpdHlUeXBlEg4KClBvd2VyQ3lj",
          "bGUQABISCg5FbmR1cmFuY2VDeWNsZRABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CountDownType), typeof(global::HeadType), typeof(global::TrainMode), typeof(global::DeviceType), typeof(global::ActivityType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CountDownBroadCast), global::CountDownBroadCast.Parser, new[]{ "CountDownType", "Seconds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KeepaliveRequest), global::KeepaliveRequest.Parser, new[]{ "DeviceId", "DeviceType", "ClientTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KeepaliveResponse), global::KeepaliveResponse.Parser, new[]{ "DeviceId", "DeviceType", "ClientTime", "ServerTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurrentTimeRequest), global::CurrentTimeRequest.Parser, new[]{ "DeviceId", "DeviceType", "ClientTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurrentTimeResponse), global::CurrentTimeResponse.Parser, new[]{ "DeviceId", "DeviceType", "ClientTime", "CountDownType", "CurrentSeconds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRequest), global::LoginRequest.Parser, new[]{ "Uid", "DeviceType", "ActivityType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResponse), global::LoginResponse.Parser, new[]{ "Uid", "DeviceTypeArr", "ActivityType", "ExisitSetting", "TrainMode", "DefatModeEnable", "SeatHeight", "BackDistance", "LeverLength", "ForwardLimit", "BackLimit", "LeverAngle", "ForwardForce", "ReverseForce", "Power", "CourseId", "ActivityId", "ActivityRecordId", "PedalDistance", "SysVersion", "HeartRateMax", "RoleId", "Weight", "Age" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadRequest), global::UploadRequest.Parser, new[]{ "Uid", "DeviceType", "ActivityType", "TrainMode", "DefatModeEnable", "ReverseForce", "ForwardForce", "Power", "FinishCount", "FinalDistance", "Calorie", "TrainTime", "HeartRateAvg", "HeartRateMax", "HeartRateMin", "CourseId", "ActivityId", "ActivityRecordId", "DataId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UploadResponse), global::UploadResponse.Parser, new[]{ "Uid", "DeviceType", "ActivityType", "Finished", "Success", "DataId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "Type", "Sequence", "KeepaliveRequest", "KeepaliveResponse", "LoginRequest", "LoginResponse", "UploadRequest", "UploadResponse", "PersonalSetRequest", "PersonalSetResponse", "CountDownBroadCast", "CurrentTimeRequest", "CurrentTimeResponse" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PersonalSetRequest), global::PersonalSetRequest.Parser, new[]{ "Uid", "DeviceType", "ActivityType", "SeatHeight", "BackDistance", "LeverLength", "LeverAngle", "ForwardLimit", "BackLimit", "TrainMode", "DefatModeEnable", "PedalDistance", "DataId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PersonalSetResponse), global::PersonalSetResponse.Parser, new[]{ "DeviceType", "ActivityType", "Uid", "Success", "DataId" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// 倒计时类型
/// </summary>
public enum CountDownType {
  /// <summary>
  ///运动
  /// </summary>
  [pbr::OriginalName("RUNNING")] Running = 0,
  /// <summary>
  ///休息
  /// </summary>
  [pbr::OriginalName("STOP")] Stop = 1,
}

/// <summary>
///通讯类型
/// </summary>
public enum HeadType {
  /// <summary>
  ///心跳请求ping;
  /// </summary>
  [pbr::OriginalName("Keepalive_Request")] KeepaliveRequest = 0,
  /// <summary>
  ///心跳请求pong
  /// </summary>
  [pbr::OriginalName("Keepalive_Response")] KeepaliveResponse = 1,
  /// <summary>
  ///登陆请求
  /// </summary>
  [pbr::OriginalName("Login_Request")] LoginRequest = 2,
  /// <summary>
  ///登录响应
  /// </summary>
  [pbr::OriginalName("Login_Response")] LoginResponse = 3,
  /// <summary>
  ///训练结果上报
  /// </summary>
  [pbr::OriginalName("Upload_Request")] UploadRequest = 4,
  /// <summary>
  ///结果上报响应
  /// </summary>
  [pbr::OriginalName("Upload_Response")] UploadResponse = 5,
  /// <summary>
  ///倒计时广播
  /// </summary>
  [pbr::OriginalName("CountDown_BroadCast")] CountDownBroadCast = 6,
  /// <summary>
  ///个人设置请求
  /// </summary>
  [pbr::OriginalName("PersonalSet_Request")] PersonalSetRequest = 7,
  /// <summary>
  ///个人设置响应
  /// </summary>
  [pbr::OriginalName("PersonalSet_Response")] PersonalSetResponse = 8,
  /// <summary>
  ///当前倒计时时间请求
  /// </summary>
  [pbr::OriginalName("CurrentTime_Request")] CurrentTimeRequest = 9,
  /// <summary>
  ///当前倒计时时间响应
  /// </summary>
  [pbr::OriginalName("CurrentTime_Response")] CurrentTimeResponse = 10,
}

/// <summary>
/// 训练模式
/// </summary>
public enum TrainMode {
  /// <summary>
  ///标准模式
  /// </summary>
  [pbr::OriginalName("STANDARD_MODE")] StandardMode = 0,
  /// <summary>
  ///适应性模式
  /// </summary>
  [pbr::OriginalName("ADAPTER_MODE")] AdapterMode = 1,
  /// <summary>
  ///等速模式
  /// </summary>
  [pbr::OriginalName("CONST_SPEED_MODE")] ConstSpeedMode = 2,
  /// <summary>
  ///心率模式
  /// </summary>
  [pbr::OriginalName("HEART_RATE_MODE")] HeartRateMode = 3,
  /// <summary>
  ///增肌模式 
  /// </summary>
  [pbr::OriginalName("ADD_MUSCLES_MODE")] AddMusclesMode = 4,
  /// <summary>
  ///主动模式
  /// </summary>
  [pbr::OriginalName("ACTIVE_MODE")] ActiveMode = 5,
  /// <summary>
  ///被动模式
  /// </summary>
  [pbr::OriginalName("PASSIVE_MODE")] PassiveMode = 6,
}

/// <summary>
/// 设备类型
/// </summary>
public enum DeviceType {
  /// <summary>
  ///腿部推蹬机
  /// </summary>
  [pbr::OriginalName("P00")] P00 = 0,
  /// <summary>
  ///坐式背阔肌高拉机
  /// </summary>
  [pbr::OriginalName("P01")] P01 = 1,
  /// <summary>
  ///三头肌训练机
  /// </summary>
  [pbr::OriginalName("P02")] P02 = 2,
  /// <summary>
  ///腿部内弯机
  /// </summary>
  [pbr::OriginalName("P03")] P03 = 3,
  /// <summary>
  ///腿部外弯机
  /// </summary>
  [pbr::OriginalName("P04")] P04 = 4,
  /// <summary>
  ///蝴蝶机
  /// </summary>
  [pbr::OriginalName("P05")] P05 = 5,
  /// <summary>
  ///反向蝴蝶机
  /// </summary>
  [pbr::OriginalName("P06")] P06 = 6,
  /// <summary>
  ///坐式背部伸展机
  /// </summary>
  [pbr::OriginalName("P07")] P07 = 7,
  /// <summary>
  ///躯干扭转组合
  /// </summary>
  [pbr::OriginalName("P08")] P08 = 8,
  /// <summary>
  ///坐式腿伸展训练机
  /// </summary>
  [pbr::OriginalName("P09")] P09 = 9,
  /// <summary>
  ///坐式推胸机
  /// </summary>
  [pbr::OriginalName("E10")] E10 = 10,
  /// <summary>
  ///坐式划船机
  /// </summary>
  [pbr::OriginalName("E11")] E11 = 11,
  /// <summary>
  ///椭圆跑步机
  /// </summary>
  [pbr::OriginalName("E12")] E12 = 12,
  /// <summary>
  ///坐式屈腿训练机
  /// </summary>
  [pbr::OriginalName("E13")] E13 = 13,
  /// <summary>
  ///腹肌训练机
  /// </summary>
  [pbr::OriginalName("E14")] E14 = 14,
  /// <summary>
  ///坐式背部伸展机
  /// </summary>
  [pbr::OriginalName("E15")] E15 = 15,
  /// <summary>
  ///健身车
  /// </summary>
  [pbr::OriginalName("E16")] E16 = 16,
}

/// <summary>
/// 循环类型-训练活动名称
/// </summary>
public enum ActivityType {
  /// <summary>
  ///力量循环
  /// </summary>
  [pbr::OriginalName("PowerCycle")] PowerCycle = 0,
  /// <summary>
  ///力量耐力循环
  /// </summary>
  [pbr::OriginalName("EnduranceCycle")] EnduranceCycle = 1,
}

#endregion

#region Messages
/// <summary>
/// 倒计时指令
/// </summary>
public sealed partial class CountDownBroadCast : pb::IMessage<CountDownBroadCast> {
  private static readonly pb::MessageParser<CountDownBroadCast> _parser = new pb::MessageParser<CountDownBroadCast>(() => new CountDownBroadCast());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CountDownBroadCast> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CountDownBroadCast() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CountDownBroadCast(CountDownBroadCast other) : this() {
    countDownType_ = other.countDownType_;
    seconds_ = other.seconds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CountDownBroadCast Clone() {
    return new CountDownBroadCast(this);
  }

  /// <summary>Field number for the "countDownType" field.</summary>
  public const int CountDownTypeFieldNumber = 1;
  private global::CountDownType countDownType_ = 0;
  /// <summary>
  ///倒计时类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CountDownType CountDownType {
    get { return countDownType_; }
    set {
      countDownType_ = value;
    }
  }

  /// <summary>Field number for the "seconds" field.</summary>
  public const int SecondsFieldNumber = 2;
  private int seconds_;
  /// <summary>
  ///倒计时时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seconds {
    get { return seconds_; }
    set {
      seconds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CountDownBroadCast);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CountDownBroadCast other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CountDownType != other.CountDownType) return false;
    if (Seconds != other.Seconds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CountDownType != 0) hash ^= CountDownType.GetHashCode();
    if (Seconds != 0) hash ^= Seconds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CountDownType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) CountDownType);
    }
    if (Seconds != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seconds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CountDownType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CountDownType);
    }
    if (Seconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CountDownBroadCast other) {
    if (other == null) {
      return;
    }
    if (other.CountDownType != 0) {
      CountDownType = other.CountDownType;
    }
    if (other.Seconds != 0) {
      Seconds = other.Seconds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          countDownType_ = (global::CountDownType) input.ReadEnum();
          break;
        }
        case 16: {
          Seconds = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 心跳请求
/// </summary>
public sealed partial class KeepaliveRequest : pb::IMessage<KeepaliveRequest> {
  private static readonly pb::MessageParser<KeepaliveRequest> _parser = new pb::MessageParser<KeepaliveRequest>(() => new KeepaliveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KeepaliveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveRequest(KeepaliveRequest other) : this() {
    deviceId_ = other.deviceId_;
    deviceType_ = other.deviceType_;
    clientTime_ = other.clientTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveRequest Clone() {
    return new KeepaliveRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  ///设备ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 3;
  private string clientTime_ = "";
  /// <summary>
  ///客户端时间戳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientTime {
    get { return clientTime_; }
    set {
      clientTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KeepaliveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KeepaliveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ClientTime != other.ClientTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ClientTime.Length != 0) hash ^= ClientTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ClientTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KeepaliveRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ClientTime.Length != 0) {
      ClientTime = other.ClientTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          ClientTime = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 心跳响应
/// </summary>
public sealed partial class KeepaliveResponse : pb::IMessage<KeepaliveResponse> {
  private static readonly pb::MessageParser<KeepaliveResponse> _parser = new pb::MessageParser<KeepaliveResponse>(() => new KeepaliveResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KeepaliveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveResponse(KeepaliveResponse other) : this() {
    deviceId_ = other.deviceId_;
    deviceType_ = other.deviceType_;
    clientTime_ = other.clientTime_;
    serverTime_ = other.serverTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepaliveResponse Clone() {
    return new KeepaliveResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  ///设备ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 3;
  private string clientTime_ = "";
  /// <summary>
  ///客户端时间戳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientTime {
    get { return clientTime_; }
    set {
      clientTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 4;
  private string serverTime_ = "";
  /// <summary>
  ///服务端时间戳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServerTime {
    get { return serverTime_; }
    set {
      serverTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KeepaliveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KeepaliveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ClientTime != other.ClientTime) return false;
    if (ServerTime != other.ServerTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ClientTime.Length != 0) hash ^= ClientTime.GetHashCode();
    if (ServerTime.Length != 0) hash ^= ServerTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ClientTime);
    }
    if (ServerTime.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ServerTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientTime);
    }
    if (ServerTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KeepaliveResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ClientTime.Length != 0) {
      ClientTime = other.ClientTime;
    }
    if (other.ServerTime.Length != 0) {
      ServerTime = other.ServerTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          ClientTime = input.ReadString();
          break;
        }
        case 34: {
          ServerTime = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///安卓请求开始训练的倒计时时间点
/// </summary>
public sealed partial class CurrentTimeRequest : pb::IMessage<CurrentTimeRequest> {
  private static readonly pb::MessageParser<CurrentTimeRequest> _parser = new pb::MessageParser<CurrentTimeRequest>(() => new CurrentTimeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurrentTimeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeRequest(CurrentTimeRequest other) : this() {
    deviceId_ = other.deviceId_;
    deviceType_ = other.deviceType_;
    clientTime_ = other.clientTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeRequest Clone() {
    return new CurrentTimeRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  ///设备ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 3;
  private string clientTime_ = "";
  /// <summary>
  ///客户端时间戳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientTime {
    get { return clientTime_; }
    set {
      clientTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurrentTimeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurrentTimeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ClientTime != other.ClientTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ClientTime.Length != 0) hash ^= ClientTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ClientTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurrentTimeRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ClientTime.Length != 0) {
      ClientTime = other.ClientTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          ClientTime = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///安卓请求当前倒计时时间点
/// </summary>
public sealed partial class CurrentTimeResponse : pb::IMessage<CurrentTimeResponse> {
  private static readonly pb::MessageParser<CurrentTimeResponse> _parser = new pb::MessageParser<CurrentTimeResponse>(() => new CurrentTimeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurrentTimeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeResponse(CurrentTimeResponse other) : this() {
    deviceId_ = other.deviceId_;
    deviceType_ = other.deviceType_;
    clientTime_ = other.clientTime_;
    countDownType_ = other.countDownType_;
    currentSeconds_ = other.currentSeconds_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurrentTimeResponse Clone() {
    return new CurrentTimeResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  ///设备ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "clientTime" field.</summary>
  public const int ClientTimeFieldNumber = 3;
  private string clientTime_ = "";
  /// <summary>
  ///客户端时间戳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClientTime {
    get { return clientTime_; }
    set {
      clientTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "countDownType" field.</summary>
  public const int CountDownTypeFieldNumber = 4;
  private global::CountDownType countDownType_ = 0;
  /// <summary>
  ///倒计时类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CountDownType CountDownType {
    get { return countDownType_; }
    set {
      countDownType_ = value;
    }
  }

  /// <summary>Field number for the "currentSeconds" field.</summary>
  public const int CurrentSecondsFieldNumber = 5;
  private int currentSeconds_;
  /// <summary>
  ///倒计时时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentSeconds {
    get { return currentSeconds_; }
    set {
      currentSeconds_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurrentTimeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurrentTimeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ClientTime != other.ClientTime) return false;
    if (CountDownType != other.CountDownType) return false;
    if (CurrentSeconds != other.CurrentSeconds) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ClientTime.Length != 0) hash ^= ClientTime.GetHashCode();
    if (CountDownType != 0) hash ^= CountDownType.GetHashCode();
    if (CurrentSeconds != 0) hash ^= CurrentSeconds.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ClientTime);
    }
    if (CountDownType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) CountDownType);
    }
    if (CurrentSeconds != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CurrentSeconds);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ClientTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientTime);
    }
    if (CountDownType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CountDownType);
    }
    if (CurrentSeconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSeconds);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurrentTimeResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ClientTime.Length != 0) {
      ClientTime = other.ClientTime;
    }
    if (other.CountDownType != 0) {
      CountDownType = other.CountDownType;
    }
    if (other.CurrentSeconds != 0) {
      CurrentSeconds = other.CurrentSeconds;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 26: {
          ClientTime = input.ReadString();
          break;
        }
        case 32: {
          countDownType_ = (global::CountDownType) input.ReadEnum();
          break;
        }
        case 40: {
          CurrentSeconds = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 登陆请求
/// </summary>
public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
  private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest(LoginRequest other) : this() {
    uid_ = other.uid_;
    deviceType_ = other.deviceType_;
    activityType_ = other.activityType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest Clone() {
    return new LoginRequest(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 3;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型，耐力循环还是力量循环 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ActivityType != other.ActivityType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ActivityType != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActivityType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 24: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 登录响应，C#需要判断是否存在个人设置
/// </summary>
public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
  private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse(LoginResponse other) : this() {
    uid_ = other.uid_;
    deviceTypeArr_ = other.deviceTypeArr_.Clone();
    activityType_ = other.activityType_;
    exisitSetting_ = other.exisitSetting_;
    trainMode_ = other.trainMode_;
    defatModeEnable_ = other.defatModeEnable_;
    seatHeight_ = other.seatHeight_;
    backDistance_ = other.backDistance_;
    leverLength_ = other.leverLength_;
    forwardLimit_ = other.forwardLimit_;
    backLimit_ = other.backLimit_;
    leverAngle_ = other.leverAngle_;
    forwardForce_ = other.forwardForce_;
    reverseForce_ = other.reverseForce_;
    power_ = other.power_;
    courseId_ = other.courseId_;
    activityId_ = other.activityId_;
    activityRecordId_ = other.activityRecordId_;
    pedalDistance_ = other.pedalDistance_;
    sysVersion_ = other.sysVersion_;
    heartRateMax_ = other.heartRateMax_;
    roleId_ = other.roleId_;
    weight_ = other.weight_;
    age_ = other.age_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse Clone() {
    return new LoginResponse(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceTypeArr" field.</summary>
  public const int DeviceTypeArrFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DeviceType> _repeated_deviceTypeArr_codec
      = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::DeviceType) x);
  private readonly pbc::RepeatedField<global::DeviceType> deviceTypeArr_ = new pbc::RepeatedField<global::DeviceType>();
  /// <summary>
  ///待训练的设备列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DeviceType> DeviceTypeArr {
    get { return deviceTypeArr_; }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 3;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  /// <summary>Field number for the "exisitSetting" field.</summary>
  public const int ExisitSettingFieldNumber = 4;
  private bool exisitSetting_;
  /// <summary>
  ///是否存在个人设置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ExisitSetting {
    get { return exisitSetting_; }
    set {
      exisitSetting_ = value;
    }
  }

  /// <summary>Field number for the "trainMode" field.</summary>
  public const int TrainModeFieldNumber = 5;
  private global::TrainMode trainMode_ = 0;
  /// <summary>
  ///训练模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrainMode TrainMode {
    get { return trainMode_; }
    set {
      trainMode_ = value;
    }
  }

  /// <summary>Field number for the "defatModeEnable" field.</summary>
  public const int DefatModeEnableFieldNumber = 6;
  private bool defatModeEnable_;
  /// <summary>
  ///是否开启减脂模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DefatModeEnable {
    get { return defatModeEnable_; }
    set {
      defatModeEnable_ = value;
    }
  }

  /// <summary>Field number for the "seatHeight" field.</summary>
  public const int SeatHeightFieldNumber = 7;
  private int seatHeight_;
  /// <summary>
  ///座椅高度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatHeight {
    get { return seatHeight_; }
    set {
      seatHeight_ = value;
    }
  }

  /// <summary>Field number for the "backDistance" field.</summary>
  public const int BackDistanceFieldNumber = 8;
  private int backDistance_;
  /// <summary>
  ///靠背距离
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BackDistance {
    get { return backDistance_; }
    set {
      backDistance_ = value;
    }
  }

  /// <summary>Field number for the "leverLength" field.</summary>
  public const int LeverLengthFieldNumber = 9;
  private int leverLength_;
  /// <summary>
  ///可动杠杆的长度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeverLength {
    get { return leverLength_; }
    set {
      leverLength_ = value;
    }
  }

  /// <summary>Field number for the "forwardLimit" field.</summary>
  public const int ForwardLimitFieldNumber = 10;
  private int forwardLimit_;
  /// <summary>
  ///前方距离限制
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ForwardLimit {
    get { return forwardLimit_; }
    set {
      forwardLimit_ = value;
    }
  }

  /// <summary>Field number for the "backLimit" field.</summary>
  public const int BackLimitFieldNumber = 11;
  private int backLimit_;
  /// <summary>
  ///后方距离限制
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BackLimit {
    get { return backLimit_; }
    set {
      backLimit_ = value;
    }
  }

  /// <summary>Field number for the "leverAngle" field.</summary>
  public const int LeverAngleFieldNumber = 12;
  private double leverAngle_;
  /// <summary>
  ///杠杆角度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LeverAngle {
    get { return leverAngle_; }
    set {
      leverAngle_ = value;
    }
  }

  /// <summary>Field number for the "forwardForce" field.</summary>
  public const int ForwardForceFieldNumber = 13;
  private double forwardForce_;
  /// <summary>
  ///电机顺向阻力(N)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ForwardForce {
    get { return forwardForce_; }
    set {
      forwardForce_ = value;
    }
  }

  /// <summary>Field number for the "reverseForce" field.</summary>
  public const int ReverseForceFieldNumber = 14;
  private double reverseForce_;
  /// <summary>
  ///电机反向阻力(N)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ReverseForce {
    get { return reverseForce_; }
    set {
      reverseForce_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 15;
  private double power_;
  /// <summary>
  ///跑步机和单车最终功率(W)0-400W
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "courseId" field.</summary>
  public const int CourseIdFieldNumber = 18;
  private long courseId_;
  /// <summary>
  ///课程ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CourseId {
    get { return courseId_; }
    set {
      courseId_ = value;
    }
  }

  /// <summary>Field number for the "activityId" field.</summary>
  public const int ActivityIdFieldNumber = 19;
  private long activityId_;
  /// <summary>
  ///训练活动ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ActivityId {
    get { return activityId_; }
    set {
      activityId_ = value;
    }
  }

  /// <summary>Field number for the "activityRecordId" field.</summary>
  public const int ActivityRecordIdFieldNumber = 20;
  private long activityRecordId_;
  /// <summary>
  ///训练活动记录ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ActivityRecordId {
    get { return activityRecordId_; }
    set {
      activityRecordId_ = value;
    }
  }

  /// <summary>Field number for the "pedalDistance" field.</summary>
  public const int PedalDistanceFieldNumber = 21;
  private int pedalDistance_;
  /// <summary>
  ///踏板距离（cm）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PedalDistance {
    get { return pedalDistance_; }
    set {
      pedalDistance_ = value;
    }
  }

  /// <summary>Field number for the "sysVersion" field.</summary>
  public const int SysVersionFieldNumber = 22;
  private int sysVersion_;
  /// <summary>
  ///系统版本,0普通版、1豪华版
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SysVersion {
    get { return sysVersion_; }
    set {
      sysVersion_ = value;
    }
  }

  /// <summary>Field number for the "heart_rate_max" field.</summary>
  public const int HeartRateMaxFieldNumber = 23;
  private int heartRateMax_;
  /// <summary>
  ///最大心率计算值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartRateMax {
    get { return heartRateMax_; }
    set {
      heartRateMax_ = value;
    }
  }

  /// <summary>Field number for the "roleId" field.</summary>
  public const int RoleIdFieldNumber = 24;
  private int roleId_;
  /// <summary>
  ///角色ID。1会员0教练
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  /// <summary>Field number for the "weight" field.</summary>
  public const int WeightFieldNumber = 25;
  private double weight_;
  /// <summary>
  ///体重，（kg）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Weight {
    get { return weight_; }
    set {
      weight_ = value;
    }
  }

  /// <summary>Field number for the "age" field.</summary>
  public const int AgeFieldNumber = 26;
  private int age_;
  /// <summary>
  ///年龄
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Age {
    get { return age_; }
    set {
      age_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if(!deviceTypeArr_.Equals(other.deviceTypeArr_)) return false;
    if (ActivityType != other.ActivityType) return false;
    if (ExisitSetting != other.ExisitSetting) return false;
    if (TrainMode != other.TrainMode) return false;
    if (DefatModeEnable != other.DefatModeEnable) return false;
    if (SeatHeight != other.SeatHeight) return false;
    if (BackDistance != other.BackDistance) return false;
    if (LeverLength != other.LeverLength) return false;
    if (ForwardLimit != other.ForwardLimit) return false;
    if (BackLimit != other.BackLimit) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeverAngle, other.LeverAngle)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForwardForce, other.ForwardForce)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReverseForce, other.ReverseForce)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Power, other.Power)) return false;
    if (CourseId != other.CourseId) return false;
    if (ActivityId != other.ActivityId) return false;
    if (ActivityRecordId != other.ActivityRecordId) return false;
    if (PedalDistance != other.PedalDistance) return false;
    if (SysVersion != other.SysVersion) return false;
    if (HeartRateMax != other.HeartRateMax) return false;
    if (RoleId != other.RoleId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Weight, other.Weight)) return false;
    if (Age != other.Age) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    hash ^= deviceTypeArr_.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (ExisitSetting != false) hash ^= ExisitSetting.GetHashCode();
    if (TrainMode != 0) hash ^= TrainMode.GetHashCode();
    if (DefatModeEnable != false) hash ^= DefatModeEnable.GetHashCode();
    if (SeatHeight != 0) hash ^= SeatHeight.GetHashCode();
    if (BackDistance != 0) hash ^= BackDistance.GetHashCode();
    if (LeverLength != 0) hash ^= LeverLength.GetHashCode();
    if (ForwardLimit != 0) hash ^= ForwardLimit.GetHashCode();
    if (BackLimit != 0) hash ^= BackLimit.GetHashCode();
    if (LeverAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeverAngle);
    if (ForwardForce != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForwardForce);
    if (ReverseForce != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReverseForce);
    if (Power != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Power);
    if (CourseId != 0L) hash ^= CourseId.GetHashCode();
    if (ActivityId != 0L) hash ^= ActivityId.GetHashCode();
    if (ActivityRecordId != 0L) hash ^= ActivityRecordId.GetHashCode();
    if (PedalDistance != 0) hash ^= PedalDistance.GetHashCode();
    if (SysVersion != 0) hash ^= SysVersion.GetHashCode();
    if (HeartRateMax != 0) hash ^= HeartRateMax.GetHashCode();
    if (RoleId != 0) hash ^= RoleId.GetHashCode();
    if (Weight != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Weight);
    if (Age != 0) hash ^= Age.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    deviceTypeArr_.WriteTo(output, _repeated_deviceTypeArr_codec);
    if (ActivityType != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActivityType);
    }
    if (ExisitSetting != false) {
      output.WriteRawTag(32);
      output.WriteBool(ExisitSetting);
    }
    if (TrainMode != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      output.WriteRawTag(48);
      output.WriteBool(DefatModeEnable);
    }
    if (SeatHeight != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(SeatHeight);
    }
    if (BackDistance != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BackDistance);
    }
    if (LeverLength != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(LeverLength);
    }
    if (ForwardLimit != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(ForwardLimit);
    }
    if (BackLimit != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(BackLimit);
    }
    if (LeverAngle != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(LeverAngle);
    }
    if (ForwardForce != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(ForwardForce);
    }
    if (ReverseForce != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(ReverseForce);
    }
    if (Power != 0D) {
      output.WriteRawTag(121);
      output.WriteDouble(Power);
    }
    if (CourseId != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(CourseId);
    }
    if (ActivityId != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(ActivityId);
    }
    if (ActivityRecordId != 0L) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(ActivityRecordId);
    }
    if (PedalDistance != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(PedalDistance);
    }
    if (SysVersion != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(SysVersion);
    }
    if (HeartRateMax != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(HeartRateMax);
    }
    if (RoleId != 0) {
      output.WriteRawTag(192, 1);
      output.WriteInt32(RoleId);
    }
    if (Weight != 0D) {
      output.WriteRawTag(201, 1);
      output.WriteDouble(Weight);
    }
    if (Age != 0) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(Age);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    size += deviceTypeArr_.CalculateSize(_repeated_deviceTypeArr_codec);
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (ExisitSetting != false) {
      size += 1 + 1;
    }
    if (TrainMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      size += 1 + 1;
    }
    if (SeatHeight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatHeight);
    }
    if (BackDistance != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackDistance);
    }
    if (LeverLength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeverLength);
    }
    if (ForwardLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForwardLimit);
    }
    if (BackLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackLimit);
    }
    if (LeverAngle != 0D) {
      size += 1 + 8;
    }
    if (ForwardForce != 0D) {
      size += 1 + 8;
    }
    if (ReverseForce != 0D) {
      size += 1 + 8;
    }
    if (Power != 0D) {
      size += 1 + 8;
    }
    if (CourseId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CourseId);
    }
    if (ActivityId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActivityId);
    }
    if (ActivityRecordId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActivityRecordId);
    }
    if (PedalDistance != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PedalDistance);
    }
    if (SysVersion != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SysVersion);
    }
    if (HeartRateMax != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeartRateMax);
    }
    if (RoleId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
    }
    if (Weight != 0D) {
      size += 2 + 8;
    }
    if (Age != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Age);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    deviceTypeArr_.Add(other.deviceTypeArr_);
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    if (other.ExisitSetting != false) {
      ExisitSetting = other.ExisitSetting;
    }
    if (other.TrainMode != 0) {
      TrainMode = other.TrainMode;
    }
    if (other.DefatModeEnable != false) {
      DefatModeEnable = other.DefatModeEnable;
    }
    if (other.SeatHeight != 0) {
      SeatHeight = other.SeatHeight;
    }
    if (other.BackDistance != 0) {
      BackDistance = other.BackDistance;
    }
    if (other.LeverLength != 0) {
      LeverLength = other.LeverLength;
    }
    if (other.ForwardLimit != 0) {
      ForwardLimit = other.ForwardLimit;
    }
    if (other.BackLimit != 0) {
      BackLimit = other.BackLimit;
    }
    if (other.LeverAngle != 0D) {
      LeverAngle = other.LeverAngle;
    }
    if (other.ForwardForce != 0D) {
      ForwardForce = other.ForwardForce;
    }
    if (other.ReverseForce != 0D) {
      ReverseForce = other.ReverseForce;
    }
    if (other.Power != 0D) {
      Power = other.Power;
    }
    if (other.CourseId != 0L) {
      CourseId = other.CourseId;
    }
    if (other.ActivityId != 0L) {
      ActivityId = other.ActivityId;
    }
    if (other.ActivityRecordId != 0L) {
      ActivityRecordId = other.ActivityRecordId;
    }
    if (other.PedalDistance != 0) {
      PedalDistance = other.PedalDistance;
    }
    if (other.SysVersion != 0) {
      SysVersion = other.SysVersion;
    }
    if (other.HeartRateMax != 0) {
      HeartRateMax = other.HeartRateMax;
    }
    if (other.RoleId != 0) {
      RoleId = other.RoleId;
    }
    if (other.Weight != 0D) {
      Weight = other.Weight;
    }
    if (other.Age != 0) {
      Age = other.Age;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 18:
        case 16: {
          deviceTypeArr_.AddEntriesFrom(input, _repeated_deviceTypeArr_codec);
          break;
        }
        case 24: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
        case 32: {
          ExisitSetting = input.ReadBool();
          break;
        }
        case 40: {
          trainMode_ = (global::TrainMode) input.ReadEnum();
          break;
        }
        case 48: {
          DefatModeEnable = input.ReadBool();
          break;
        }
        case 56: {
          SeatHeight = input.ReadInt32();
          break;
        }
        case 64: {
          BackDistance = input.ReadInt32();
          break;
        }
        case 72: {
          LeverLength = input.ReadInt32();
          break;
        }
        case 80: {
          ForwardLimit = input.ReadInt32();
          break;
        }
        case 88: {
          BackLimit = input.ReadInt32();
          break;
        }
        case 97: {
          LeverAngle = input.ReadDouble();
          break;
        }
        case 105: {
          ForwardForce = input.ReadDouble();
          break;
        }
        case 113: {
          ReverseForce = input.ReadDouble();
          break;
        }
        case 121: {
          Power = input.ReadDouble();
          break;
        }
        case 144: {
          CourseId = input.ReadInt64();
          break;
        }
        case 152: {
          ActivityId = input.ReadInt64();
          break;
        }
        case 160: {
          ActivityRecordId = input.ReadInt64();
          break;
        }
        case 168: {
          PedalDistance = input.ReadInt32();
          break;
        }
        case 176: {
          SysVersion = input.ReadInt32();
          break;
        }
        case 184: {
          HeartRateMax = input.ReadInt32();
          break;
        }
        case 192: {
          RoleId = input.ReadInt32();
          break;
        }
        case 201: {
          Weight = input.ReadDouble();
          break;
        }
        case 208: {
          Age = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 上传请求
/// </summary>
public sealed partial class UploadRequest : pb::IMessage<UploadRequest> {
  private static readonly pb::MessageParser<UploadRequest> _parser = new pb::MessageParser<UploadRequest>(() => new UploadRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UploadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest(UploadRequest other) : this() {
    uid_ = other.uid_;
    deviceType_ = other.deviceType_;
    activityType_ = other.activityType_;
    trainMode_ = other.trainMode_;
    defatModeEnable_ = other.defatModeEnable_;
    reverseForce_ = other.reverseForce_;
    forwardForce_ = other.forwardForce_;
    power_ = other.power_;
    finishCount_ = other.finishCount_;
    finalDistance_ = other.finalDistance_;
    calorie_ = other.calorie_;
    trainTime_ = other.trainTime_;
    heartRateAvg_ = other.heartRateAvg_;
    heartRateMax_ = other.heartRateMax_;
    heartRateMin_ = other.heartRateMin_;
    courseId_ = other.courseId_;
    activityId_ = other.activityId_;
    activityRecordId_ = other.activityRecordId_;
    dataId_ = other.dataId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadRequest Clone() {
    return new UploadRequest(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 3;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  /// <summary>Field number for the "trainMode" field.</summary>
  public const int TrainModeFieldNumber = 4;
  private global::TrainMode trainMode_ = 0;
  /// <summary>
  ///训练模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrainMode TrainMode {
    get { return trainMode_; }
    set {
      trainMode_ = value;
    }
  }

  /// <summary>Field number for the "defatModeEnable" field.</summary>
  public const int DefatModeEnableFieldNumber = 5;
  private bool defatModeEnable_;
  /// <summary>
  ///减脂模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DefatModeEnable {
    get { return defatModeEnable_; }
    set {
      defatModeEnable_ = value;
    }
  }

  /// <summary>Field number for the "reverseForce" field.</summary>
  public const int ReverseForceFieldNumber = 6;
  private double reverseForce_;
  /// <summary>
  ///力量训练设备的最终反向力(N)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ReverseForce {
    get { return reverseForce_; }
    set {
      reverseForce_ = value;
    }
  }

  /// <summary>Field number for the "forwardForce" field.</summary>
  public const int ForwardForceFieldNumber = 7;
  private double forwardForce_;
  /// <summary>
  ///力量训练设备的最终顺向力(N)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double ForwardForce {
    get { return forwardForce_; }
    set {
      forwardForce_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 8;
  private double power_;
  /// <summary>
  ///跑步机和单车的最终功率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "finishCount" field.</summary>
  public const int FinishCountFieldNumber = 9;
  private int finishCount_;
  /// <summary>
  ///力量训练设备训练结束后完成的个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FinishCount {
    get { return finishCount_; }
    set {
      finishCount_ = value;
    }
  }

  /// <summary>Field number for the "finalDistance" field.</summary>
  public const int FinalDistanceFieldNumber = 11;
  private double finalDistance_;
  /// <summary>
  ///double finalSpeed = 10; //跑步机和单车运动结束时的最终速度,暂时不上报了
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double FinalDistance {
    get { return finalDistance_; }
    set {
      finalDistance_ = value;
    }
  }

  /// <summary>Field number for the "calorie" field.</summary>
  public const int CalorieFieldNumber = 12;
  private double calorie_;
  /// <summary>
  ///卡路里
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Calorie {
    get { return calorie_; }
    set {
      calorie_ = value;
    }
  }

  /// <summary>Field number for the "trainTime" field.</summary>
  public const int TrainTimeFieldNumber = 13;
  private int trainTime_;
  /// <summary>
  ///训练时间秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TrainTime {
    get { return trainTime_; }
    set {
      trainTime_ = value;
    }
  }

  /// <summary>Field number for the "heart_rate_avg" field.</summary>
  public const int HeartRateAvgFieldNumber = 14;
  private int heartRateAvg_;
  /// <summary>
  ///平均心率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartRateAvg {
    get { return heartRateAvg_; }
    set {
      heartRateAvg_ = value;
    }
  }

  /// <summary>Field number for the "heart_rate_max" field.</summary>
  public const int HeartRateMaxFieldNumber = 15;
  private int heartRateMax_;
  /// <summary>
  ///最大心率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartRateMax {
    get { return heartRateMax_; }
    set {
      heartRateMax_ = value;
    }
  }

  /// <summary>Field number for the "heart_rate_min" field.</summary>
  public const int HeartRateMinFieldNumber = 16;
  private int heartRateMin_;
  /// <summary>
  ///最小心率
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HeartRateMin {
    get { return heartRateMin_; }
    set {
      heartRateMin_ = value;
    }
  }

  /// <summary>Field number for the "courseId" field.</summary>
  public const int CourseIdFieldNumber = 17;
  private long courseId_;
  /// <summary>
  ///课程ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CourseId {
    get { return courseId_; }
    set {
      courseId_ = value;
    }
  }

  /// <summary>Field number for the "activityId" field.</summary>
  public const int ActivityIdFieldNumber = 18;
  private long activityId_;
  /// <summary>
  ///训练活动ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ActivityId {
    get { return activityId_; }
    set {
      activityId_ = value;
    }
  }

  /// <summary>Field number for the "activityRecordId" field.</summary>
  public const int ActivityRecordIdFieldNumber = 19;
  private long activityRecordId_;
  /// <summary>
  ///训练活动记录ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ActivityRecordId {
    get { return activityRecordId_; }
    set {
      activityRecordId_ = value;
    }
  }

  /// <summary>Field number for the "data_id" field.</summary>
  public const int DataIdFieldNumber = 20;
  private string dataId_ = "";
  /// <summary>
  ///安卓端定义的记录主键，用于标识该条记录是否上传成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataId {
    get { return dataId_; }
    set {
      dataId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UploadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UploadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ActivityType != other.ActivityType) return false;
    if (TrainMode != other.TrainMode) return false;
    if (DefatModeEnable != other.DefatModeEnable) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReverseForce, other.ReverseForce)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ForwardForce, other.ForwardForce)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Power, other.Power)) return false;
    if (FinishCount != other.FinishCount) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FinalDistance, other.FinalDistance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Calorie, other.Calorie)) return false;
    if (TrainTime != other.TrainTime) return false;
    if (HeartRateAvg != other.HeartRateAvg) return false;
    if (HeartRateMax != other.HeartRateMax) return false;
    if (HeartRateMin != other.HeartRateMin) return false;
    if (CourseId != other.CourseId) return false;
    if (ActivityId != other.ActivityId) return false;
    if (ActivityRecordId != other.ActivityRecordId) return false;
    if (DataId != other.DataId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (TrainMode != 0) hash ^= TrainMode.GetHashCode();
    if (DefatModeEnable != false) hash ^= DefatModeEnable.GetHashCode();
    if (ReverseForce != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReverseForce);
    if (ForwardForce != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ForwardForce);
    if (Power != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Power);
    if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
    if (FinalDistance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FinalDistance);
    if (Calorie != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Calorie);
    if (TrainTime != 0) hash ^= TrainTime.GetHashCode();
    if (HeartRateAvg != 0) hash ^= HeartRateAvg.GetHashCode();
    if (HeartRateMax != 0) hash ^= HeartRateMax.GetHashCode();
    if (HeartRateMin != 0) hash ^= HeartRateMin.GetHashCode();
    if (CourseId != 0L) hash ^= CourseId.GetHashCode();
    if (ActivityId != 0L) hash ^= ActivityId.GetHashCode();
    if (ActivityRecordId != 0L) hash ^= ActivityRecordId.GetHashCode();
    if (DataId.Length != 0) hash ^= DataId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ActivityType != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActivityType);
    }
    if (TrainMode != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      output.WriteRawTag(40);
      output.WriteBool(DefatModeEnable);
    }
    if (ReverseForce != 0D) {
      output.WriteRawTag(49);
      output.WriteDouble(ReverseForce);
    }
    if (ForwardForce != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(ForwardForce);
    }
    if (Power != 0D) {
      output.WriteRawTag(65);
      output.WriteDouble(Power);
    }
    if (FinishCount != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(FinishCount);
    }
    if (FinalDistance != 0D) {
      output.WriteRawTag(89);
      output.WriteDouble(FinalDistance);
    }
    if (Calorie != 0D) {
      output.WriteRawTag(97);
      output.WriteDouble(Calorie);
    }
    if (TrainTime != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(TrainTime);
    }
    if (HeartRateAvg != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(HeartRateAvg);
    }
    if (HeartRateMax != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(HeartRateMax);
    }
    if (HeartRateMin != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(HeartRateMin);
    }
    if (CourseId != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(CourseId);
    }
    if (ActivityId != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(ActivityId);
    }
    if (ActivityRecordId != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(ActivityRecordId);
    }
    if (DataId.Length != 0) {
      output.WriteRawTag(162, 1);
      output.WriteString(DataId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (TrainMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      size += 1 + 1;
    }
    if (ReverseForce != 0D) {
      size += 1 + 8;
    }
    if (ForwardForce != 0D) {
      size += 1 + 8;
    }
    if (Power != 0D) {
      size += 1 + 8;
    }
    if (FinishCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinishCount);
    }
    if (FinalDistance != 0D) {
      size += 1 + 8;
    }
    if (Calorie != 0D) {
      size += 1 + 8;
    }
    if (TrainTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainTime);
    }
    if (HeartRateAvg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartRateAvg);
    }
    if (HeartRateMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeartRateMax);
    }
    if (HeartRateMin != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeartRateMin);
    }
    if (CourseId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CourseId);
    }
    if (ActivityId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActivityId);
    }
    if (ActivityRecordId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActivityRecordId);
    }
    if (DataId.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(DataId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UploadRequest other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    if (other.TrainMode != 0) {
      TrainMode = other.TrainMode;
    }
    if (other.DefatModeEnable != false) {
      DefatModeEnable = other.DefatModeEnable;
    }
    if (other.ReverseForce != 0D) {
      ReverseForce = other.ReverseForce;
    }
    if (other.ForwardForce != 0D) {
      ForwardForce = other.ForwardForce;
    }
    if (other.Power != 0D) {
      Power = other.Power;
    }
    if (other.FinishCount != 0) {
      FinishCount = other.FinishCount;
    }
    if (other.FinalDistance != 0D) {
      FinalDistance = other.FinalDistance;
    }
    if (other.Calorie != 0D) {
      Calorie = other.Calorie;
    }
    if (other.TrainTime != 0) {
      TrainTime = other.TrainTime;
    }
    if (other.HeartRateAvg != 0) {
      HeartRateAvg = other.HeartRateAvg;
    }
    if (other.HeartRateMax != 0) {
      HeartRateMax = other.HeartRateMax;
    }
    if (other.HeartRateMin != 0) {
      HeartRateMin = other.HeartRateMin;
    }
    if (other.CourseId != 0L) {
      CourseId = other.CourseId;
    }
    if (other.ActivityId != 0L) {
      ActivityId = other.ActivityId;
    }
    if (other.ActivityRecordId != 0L) {
      ActivityRecordId = other.ActivityRecordId;
    }
    if (other.DataId.Length != 0) {
      DataId = other.DataId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 24: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
        case 32: {
          trainMode_ = (global::TrainMode) input.ReadEnum();
          break;
        }
        case 40: {
          DefatModeEnable = input.ReadBool();
          break;
        }
        case 49: {
          ReverseForce = input.ReadDouble();
          break;
        }
        case 57: {
          ForwardForce = input.ReadDouble();
          break;
        }
        case 65: {
          Power = input.ReadDouble();
          break;
        }
        case 72: {
          FinishCount = input.ReadInt32();
          break;
        }
        case 89: {
          FinalDistance = input.ReadDouble();
          break;
        }
        case 97: {
          Calorie = input.ReadDouble();
          break;
        }
        case 104: {
          TrainTime = input.ReadInt32();
          break;
        }
        case 112: {
          HeartRateAvg = input.ReadInt32();
          break;
        }
        case 120: {
          HeartRateMax = input.ReadInt32();
          break;
        }
        case 128: {
          HeartRateMin = input.ReadInt32();
          break;
        }
        case 136: {
          CourseId = input.ReadInt64();
          break;
        }
        case 144: {
          ActivityId = input.ReadInt64();
          break;
        }
        case 152: {
          ActivityRecordId = input.ReadInt64();
          break;
        }
        case 162: {
          DataId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 上传响应
/// </summary>
public sealed partial class UploadResponse : pb::IMessage<UploadResponse> {
  private static readonly pb::MessageParser<UploadResponse> _parser = new pb::MessageParser<UploadResponse>(() => new UploadResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UploadResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse(UploadResponse other) : this() {
    uid_ = other.uid_;
    deviceType_ = other.deviceType_;
    activityType_ = other.activityType_;
    finished_ = other.finished_;
    success_ = other.success_;
    dataId_ = other.dataId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UploadResponse Clone() {
    return new UploadResponse(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 4;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  /// <summary>Field number for the "finished" field.</summary>
  public const int FinishedFieldNumber = 5;
  private bool finished_;
  /// <summary>
  ///是否训练结束
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Finished {
    get { return finished_; }
    set {
      finished_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 6;
  private bool success_;
  /// <summary>
  ///上传结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "data_id" field.</summary>
  public const int DataIdFieldNumber = 7;
  private string dataId_ = "";
  /// <summary>
  ///安卓端定义的记录主键，用于标识该条记录是否上传成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataId {
    get { return dataId_; }
    set {
      dataId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UploadResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UploadResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ActivityType != other.ActivityType) return false;
    if (Finished != other.Finished) return false;
    if (Success != other.Success) return false;
    if (DataId != other.DataId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (Finished != false) hash ^= Finished.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (DataId.Length != 0) hash ^= DataId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ActivityType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) ActivityType);
    }
    if (Finished != false) {
      output.WriteRawTag(40);
      output.WriteBool(Finished);
    }
    if (Success != false) {
      output.WriteRawTag(48);
      output.WriteBool(Success);
    }
    if (DataId.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(DataId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (Finished != false) {
      size += 1 + 1;
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (DataId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UploadResponse other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    if (other.Finished != false) {
      Finished = other.Finished;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.DataId.Length != 0) {
      DataId = other.DataId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 32: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
        case 40: {
          Finished = input.ReadBool();
          break;
        }
        case 48: {
          Success = input.ReadBool();
          break;
        }
        case 58: {
          DataId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Message : pb::IMessage<Message> {
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    type_ = other.type_;
    sequence_ = other.sequence_;
    keepaliveRequest_ = other.keepaliveRequest_ != null ? other.keepaliveRequest_.Clone() : null;
    keepaliveResponse_ = other.keepaliveResponse_ != null ? other.keepaliveResponse_.Clone() : null;
    loginRequest_ = other.loginRequest_ != null ? other.loginRequest_.Clone() : null;
    loginResponse_ = other.loginResponse_ != null ? other.loginResponse_.Clone() : null;
    uploadRequest_ = other.uploadRequest_ != null ? other.uploadRequest_.Clone() : null;
    uploadResponse_ = other.uploadResponse_ != null ? other.uploadResponse_.Clone() : null;
    personalSetRequest_ = other.personalSetRequest_ != null ? other.personalSetRequest_.Clone() : null;
    personalSetResponse_ = other.personalSetResponse_ != null ? other.personalSetResponse_.Clone() : null;
    countDownBroadCast_ = other.countDownBroadCast_ != null ? other.countDownBroadCast_.Clone() : null;
    currentTimeRequest_ = other.currentTimeRequest_ != null ? other.currentTimeRequest_.Clone() : null;
    currentTimeResponse_ = other.currentTimeResponse_ != null ? other.currentTimeResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::HeadType type_ = 0;
  /// <summary>
  ///消息类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HeadType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "sequence" field.</summary>
  public const int SequenceFieldNumber = 2;
  private int sequence_;
  /// <summary>
  ///消息序列号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sequence {
    get { return sequence_; }
    set {
      sequence_ = value;
    }
  }

  /// <summary>Field number for the "keepaliveRequest" field.</summary>
  public const int KeepaliveRequestFieldNumber = 3;
  private global::KeepaliveRequest keepaliveRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::KeepaliveRequest KeepaliveRequest {
    get { return keepaliveRequest_; }
    set {
      keepaliveRequest_ = value;
    }
  }

  /// <summary>Field number for the "keepaliveResponse" field.</summary>
  public const int KeepaliveResponseFieldNumber = 4;
  private global::KeepaliveResponse keepaliveResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::KeepaliveResponse KeepaliveResponse {
    get { return keepaliveResponse_; }
    set {
      keepaliveResponse_ = value;
    }
  }

  /// <summary>Field number for the "loginRequest" field.</summary>
  public const int LoginRequestFieldNumber = 5;
  private global::LoginRequest loginRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginRequest LoginRequest {
    get { return loginRequest_; }
    set {
      loginRequest_ = value;
    }
  }

  /// <summary>Field number for the "loginResponse" field.</summary>
  public const int LoginResponseFieldNumber = 6;
  private global::LoginResponse loginResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginResponse LoginResponse {
    get { return loginResponse_; }
    set {
      loginResponse_ = value;
    }
  }

  /// <summary>Field number for the "uploadRequest" field.</summary>
  public const int UploadRequestFieldNumber = 7;
  private global::UploadRequest uploadRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UploadRequest UploadRequest {
    get { return uploadRequest_; }
    set {
      uploadRequest_ = value;
    }
  }

  /// <summary>Field number for the "uploadResponse" field.</summary>
  public const int UploadResponseFieldNumber = 8;
  private global::UploadResponse uploadResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UploadResponse UploadResponse {
    get { return uploadResponse_; }
    set {
      uploadResponse_ = value;
    }
  }

  /// <summary>Field number for the "personalSetRequest" field.</summary>
  public const int PersonalSetRequestFieldNumber = 9;
  private global::PersonalSetRequest personalSetRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PersonalSetRequest PersonalSetRequest {
    get { return personalSetRequest_; }
    set {
      personalSetRequest_ = value;
    }
  }

  /// <summary>Field number for the "personalSetResponse" field.</summary>
  public const int PersonalSetResponseFieldNumber = 10;
  private global::PersonalSetResponse personalSetResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PersonalSetResponse PersonalSetResponse {
    get { return personalSetResponse_; }
    set {
      personalSetResponse_ = value;
    }
  }

  /// <summary>Field number for the "countDownBroadCast" field.</summary>
  public const int CountDownBroadCastFieldNumber = 11;
  private global::CountDownBroadCast countDownBroadCast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CountDownBroadCast CountDownBroadCast {
    get { return countDownBroadCast_; }
    set {
      countDownBroadCast_ = value;
    }
  }

  /// <summary>Field number for the "currentTimeRequest" field.</summary>
  public const int CurrentTimeRequestFieldNumber = 12;
  private global::CurrentTimeRequest currentTimeRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurrentTimeRequest CurrentTimeRequest {
    get { return currentTimeRequest_; }
    set {
      currentTimeRequest_ = value;
    }
  }

  /// <summary>Field number for the "currentTimeResponse" field.</summary>
  public const int CurrentTimeResponseFieldNumber = 13;
  private global::CurrentTimeResponse currentTimeResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurrentTimeResponse CurrentTimeResponse {
    get { return currentTimeResponse_; }
    set {
      currentTimeResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Sequence != other.Sequence) return false;
    if (!object.Equals(KeepaliveRequest, other.KeepaliveRequest)) return false;
    if (!object.Equals(KeepaliveResponse, other.KeepaliveResponse)) return false;
    if (!object.Equals(LoginRequest, other.LoginRequest)) return false;
    if (!object.Equals(LoginResponse, other.LoginResponse)) return false;
    if (!object.Equals(UploadRequest, other.UploadRequest)) return false;
    if (!object.Equals(UploadResponse, other.UploadResponse)) return false;
    if (!object.Equals(PersonalSetRequest, other.PersonalSetRequest)) return false;
    if (!object.Equals(PersonalSetResponse, other.PersonalSetResponse)) return false;
    if (!object.Equals(CountDownBroadCast, other.CountDownBroadCast)) return false;
    if (!object.Equals(CurrentTimeRequest, other.CurrentTimeRequest)) return false;
    if (!object.Equals(CurrentTimeResponse, other.CurrentTimeResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Sequence != 0) hash ^= Sequence.GetHashCode();
    if (keepaliveRequest_ != null) hash ^= KeepaliveRequest.GetHashCode();
    if (keepaliveResponse_ != null) hash ^= KeepaliveResponse.GetHashCode();
    if (loginRequest_ != null) hash ^= LoginRequest.GetHashCode();
    if (loginResponse_ != null) hash ^= LoginResponse.GetHashCode();
    if (uploadRequest_ != null) hash ^= UploadRequest.GetHashCode();
    if (uploadResponse_ != null) hash ^= UploadResponse.GetHashCode();
    if (personalSetRequest_ != null) hash ^= PersonalSetRequest.GetHashCode();
    if (personalSetResponse_ != null) hash ^= PersonalSetResponse.GetHashCode();
    if (countDownBroadCast_ != null) hash ^= CountDownBroadCast.GetHashCode();
    if (currentTimeRequest_ != null) hash ^= CurrentTimeRequest.GetHashCode();
    if (currentTimeResponse_ != null) hash ^= CurrentTimeResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Sequence != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Sequence);
    }
    if (keepaliveRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(KeepaliveRequest);
    }
    if (keepaliveResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(KeepaliveResponse);
    }
    if (loginRequest_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(LoginRequest);
    }
    if (loginResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(LoginResponse);
    }
    if (uploadRequest_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(UploadRequest);
    }
    if (uploadResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(UploadResponse);
    }
    if (personalSetRequest_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(PersonalSetRequest);
    }
    if (personalSetResponse_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(PersonalSetResponse);
    }
    if (countDownBroadCast_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(CountDownBroadCast);
    }
    if (currentTimeRequest_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(CurrentTimeRequest);
    }
    if (currentTimeResponse_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(CurrentTimeResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Sequence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
    }
    if (keepaliveRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeepaliveRequest);
    }
    if (keepaliveResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeepaliveResponse);
    }
    if (loginRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginRequest);
    }
    if (loginResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginResponse);
    }
    if (uploadRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadRequest);
    }
    if (uploadResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UploadResponse);
    }
    if (personalSetRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonalSetRequest);
    }
    if (personalSetResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonalSetResponse);
    }
    if (countDownBroadCast_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CountDownBroadCast);
    }
    if (currentTimeRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTimeRequest);
    }
    if (currentTimeResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTimeResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Sequence != 0) {
      Sequence = other.Sequence;
    }
    if (other.keepaliveRequest_ != null) {
      if (keepaliveRequest_ == null) {
        keepaliveRequest_ = new global::KeepaliveRequest();
      }
      KeepaliveRequest.MergeFrom(other.KeepaliveRequest);
    }
    if (other.keepaliveResponse_ != null) {
      if (keepaliveResponse_ == null) {
        keepaliveResponse_ = new global::KeepaliveResponse();
      }
      KeepaliveResponse.MergeFrom(other.KeepaliveResponse);
    }
    if (other.loginRequest_ != null) {
      if (loginRequest_ == null) {
        loginRequest_ = new global::LoginRequest();
      }
      LoginRequest.MergeFrom(other.LoginRequest);
    }
    if (other.loginResponse_ != null) {
      if (loginResponse_ == null) {
        loginResponse_ = new global::LoginResponse();
      }
      LoginResponse.MergeFrom(other.LoginResponse);
    }
    if (other.uploadRequest_ != null) {
      if (uploadRequest_ == null) {
        uploadRequest_ = new global::UploadRequest();
      }
      UploadRequest.MergeFrom(other.UploadRequest);
    }
    if (other.uploadResponse_ != null) {
      if (uploadResponse_ == null) {
        uploadResponse_ = new global::UploadResponse();
      }
      UploadResponse.MergeFrom(other.UploadResponse);
    }
    if (other.personalSetRequest_ != null) {
      if (personalSetRequest_ == null) {
        personalSetRequest_ = new global::PersonalSetRequest();
      }
      PersonalSetRequest.MergeFrom(other.PersonalSetRequest);
    }
    if (other.personalSetResponse_ != null) {
      if (personalSetResponse_ == null) {
        personalSetResponse_ = new global::PersonalSetResponse();
      }
      PersonalSetResponse.MergeFrom(other.PersonalSetResponse);
    }
    if (other.countDownBroadCast_ != null) {
      if (countDownBroadCast_ == null) {
        countDownBroadCast_ = new global::CountDownBroadCast();
      }
      CountDownBroadCast.MergeFrom(other.CountDownBroadCast);
    }
    if (other.currentTimeRequest_ != null) {
      if (currentTimeRequest_ == null) {
        currentTimeRequest_ = new global::CurrentTimeRequest();
      }
      CurrentTimeRequest.MergeFrom(other.CurrentTimeRequest);
    }
    if (other.currentTimeResponse_ != null) {
      if (currentTimeResponse_ == null) {
        currentTimeResponse_ = new global::CurrentTimeResponse();
      }
      CurrentTimeResponse.MergeFrom(other.CurrentTimeResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::HeadType) input.ReadEnum();
          break;
        }
        case 16: {
          Sequence = input.ReadInt32();
          break;
        }
        case 26: {
          if (keepaliveRequest_ == null) {
            keepaliveRequest_ = new global::KeepaliveRequest();
          }
          input.ReadMessage(keepaliveRequest_);
          break;
        }
        case 34: {
          if (keepaliveResponse_ == null) {
            keepaliveResponse_ = new global::KeepaliveResponse();
          }
          input.ReadMessage(keepaliveResponse_);
          break;
        }
        case 42: {
          if (loginRequest_ == null) {
            loginRequest_ = new global::LoginRequest();
          }
          input.ReadMessage(loginRequest_);
          break;
        }
        case 50: {
          if (loginResponse_ == null) {
            loginResponse_ = new global::LoginResponse();
          }
          input.ReadMessage(loginResponse_);
          break;
        }
        case 58: {
          if (uploadRequest_ == null) {
            uploadRequest_ = new global::UploadRequest();
          }
          input.ReadMessage(uploadRequest_);
          break;
        }
        case 66: {
          if (uploadResponse_ == null) {
            uploadResponse_ = new global::UploadResponse();
          }
          input.ReadMessage(uploadResponse_);
          break;
        }
        case 74: {
          if (personalSetRequest_ == null) {
            personalSetRequest_ = new global::PersonalSetRequest();
          }
          input.ReadMessage(personalSetRequest_);
          break;
        }
        case 82: {
          if (personalSetResponse_ == null) {
            personalSetResponse_ = new global::PersonalSetResponse();
          }
          input.ReadMessage(personalSetResponse_);
          break;
        }
        case 90: {
          if (countDownBroadCast_ == null) {
            countDownBroadCast_ = new global::CountDownBroadCast();
          }
          input.ReadMessage(countDownBroadCast_);
          break;
        }
        case 98: {
          if (currentTimeRequest_ == null) {
            currentTimeRequest_ = new global::CurrentTimeRequest();
          }
          input.ReadMessage(currentTimeRequest_);
          break;
        }
        case 106: {
          if (currentTimeResponse_ == null) {
            currentTimeResponse_ = new global::CurrentTimeResponse();
          }
          input.ReadMessage(currentTimeResponse_);
          break;
        }
      }
    }
  }

}

/// <summary>
///个人设置请求
/// </summary>
public sealed partial class PersonalSetRequest : pb::IMessage<PersonalSetRequest> {
  private static readonly pb::MessageParser<PersonalSetRequest> _parser = new pb::MessageParser<PersonalSetRequest>(() => new PersonalSetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PersonalSetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetRequest(PersonalSetRequest other) : this() {
    uid_ = other.uid_;
    deviceType_ = other.deviceType_;
    activityType_ = other.activityType_;
    seatHeight_ = other.seatHeight_;
    backDistance_ = other.backDistance_;
    leverLength_ = other.leverLength_;
    leverAngle_ = other.leverAngle_;
    forwardLimit_ = other.forwardLimit_;
    backLimit_ = other.backLimit_;
    trainMode_ = other.trainMode_;
    defatModeEnable_ = other.defatModeEnable_;
    pedalDistance_ = other.pedalDistance_;
    dataId_ = other.dataId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetRequest Clone() {
    return new PersonalSetRequest(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 1;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 2;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 3;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  /// <summary>Field number for the "seatHeight" field.</summary>
  public const int SeatHeightFieldNumber = 4;
  private int seatHeight_;
  /// <summary>
  ///座椅高度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatHeight {
    get { return seatHeight_; }
    set {
      seatHeight_ = value;
    }
  }

  /// <summary>Field number for the "backDistance" field.</summary>
  public const int BackDistanceFieldNumber = 5;
  private int backDistance_;
  /// <summary>
  ///靠背距离
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BackDistance {
    get { return backDistance_; }
    set {
      backDistance_ = value;
    }
  }

  /// <summary>Field number for the "leverLength" field.</summary>
  public const int LeverLengthFieldNumber = 6;
  private int leverLength_;
  /// <summary>
  ///杠杆长度cm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeverLength {
    get { return leverLength_; }
    set {
      leverLength_ = value;
    }
  }

  /// <summary>Field number for the "leverAngle" field.</summary>
  public const int LeverAngleFieldNumber = 7;
  private double leverAngle_;
  /// <summary>
  ///杠杆角度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double LeverAngle {
    get { return leverAngle_; }
    set {
      leverAngle_ = value;
    }
  }

  /// <summary>Field number for the "forwardLimit" field.</summary>
  public const int ForwardLimitFieldNumber = 8;
  private int forwardLimit_;
  /// <summary>
  ///前方距离限制cm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ForwardLimit {
    get { return forwardLimit_; }
    set {
      forwardLimit_ = value;
    }
  }

  /// <summary>Field number for the "backLimit" field.</summary>
  public const int BackLimitFieldNumber = 9;
  private int backLimit_;
  /// <summary>
  ///后方距离限制cm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BackLimit {
    get { return backLimit_; }
    set {
      backLimit_ = value;
    }
  }

  /// <summary>Field number for the "trainMode" field.</summary>
  public const int TrainModeFieldNumber = 10;
  private global::TrainMode trainMode_ = 0;
  /// <summary>
  ///训练模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrainMode TrainMode {
    get { return trainMode_; }
    set {
      trainMode_ = value;
    }
  }

  /// <summary>Field number for the "defatModeEnable" field.</summary>
  public const int DefatModeEnableFieldNumber = 11;
  private bool defatModeEnable_;
  /// <summary>
  ///是否开启减脂模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool DefatModeEnable {
    get { return defatModeEnable_; }
    set {
      defatModeEnable_ = value;
    }
  }

  /// <summary>Field number for the "pedalDistance" field.</summary>
  public const int PedalDistanceFieldNumber = 12;
  private int pedalDistance_;
  /// <summary>
  ///踏板距离（cm）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PedalDistance {
    get { return pedalDistance_; }
    set {
      pedalDistance_ = value;
    }
  }

  /// <summary>Field number for the "data_id" field.</summary>
  public const int DataIdFieldNumber = 13;
  private string dataId_ = "";
  /// <summary>
  ///安卓端的记录ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataId {
    get { return dataId_; }
    set {
      dataId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PersonalSetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PersonalSetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (DeviceType != other.DeviceType) return false;
    if (ActivityType != other.ActivityType) return false;
    if (SeatHeight != other.SeatHeight) return false;
    if (BackDistance != other.BackDistance) return false;
    if (LeverLength != other.LeverLength) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeverAngle, other.LeverAngle)) return false;
    if (ForwardLimit != other.ForwardLimit) return false;
    if (BackLimit != other.BackLimit) return false;
    if (TrainMode != other.TrainMode) return false;
    if (DefatModeEnable != other.DefatModeEnable) return false;
    if (PedalDistance != other.PedalDistance) return false;
    if (DataId != other.DataId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (SeatHeight != 0) hash ^= SeatHeight.GetHashCode();
    if (BackDistance != 0) hash ^= BackDistance.GetHashCode();
    if (LeverLength != 0) hash ^= LeverLength.GetHashCode();
    if (LeverAngle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeverAngle);
    if (ForwardLimit != 0) hash ^= ForwardLimit.GetHashCode();
    if (BackLimit != 0) hash ^= BackLimit.GetHashCode();
    if (TrainMode != 0) hash ^= TrainMode.GetHashCode();
    if (DefatModeEnable != false) hash ^= DefatModeEnable.GetHashCode();
    if (PedalDistance != 0) hash ^= PedalDistance.GetHashCode();
    if (DataId.Length != 0) hash ^= DataId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Uid);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DeviceType);
    }
    if (ActivityType != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ActivityType);
    }
    if (SeatHeight != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SeatHeight);
    }
    if (BackDistance != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BackDistance);
    }
    if (LeverLength != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LeverLength);
    }
    if (LeverAngle != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(LeverAngle);
    }
    if (ForwardLimit != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(ForwardLimit);
    }
    if (BackLimit != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BackLimit);
    }
    if (TrainMode != 0) {
      output.WriteRawTag(80);
      output.WriteEnum((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      output.WriteRawTag(88);
      output.WriteBool(DefatModeEnable);
    }
    if (PedalDistance != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(PedalDistance);
    }
    if (DataId.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(DataId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (SeatHeight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatHeight);
    }
    if (BackDistance != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackDistance);
    }
    if (LeverLength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeverLength);
    }
    if (LeverAngle != 0D) {
      size += 1 + 8;
    }
    if (ForwardLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForwardLimit);
    }
    if (BackLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackLimit);
    }
    if (TrainMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrainMode);
    }
    if (DefatModeEnable != false) {
      size += 1 + 1;
    }
    if (PedalDistance != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PedalDistance);
    }
    if (DataId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PersonalSetRequest other) {
    if (other == null) {
      return;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    if (other.SeatHeight != 0) {
      SeatHeight = other.SeatHeight;
    }
    if (other.BackDistance != 0) {
      BackDistance = other.BackDistance;
    }
    if (other.LeverLength != 0) {
      LeverLength = other.LeverLength;
    }
    if (other.LeverAngle != 0D) {
      LeverAngle = other.LeverAngle;
    }
    if (other.ForwardLimit != 0) {
      ForwardLimit = other.ForwardLimit;
    }
    if (other.BackLimit != 0) {
      BackLimit = other.BackLimit;
    }
    if (other.TrainMode != 0) {
      TrainMode = other.TrainMode;
    }
    if (other.DefatModeEnable != false) {
      DefatModeEnable = other.DefatModeEnable;
    }
    if (other.PedalDistance != 0) {
      PedalDistance = other.PedalDistance;
    }
    if (other.DataId.Length != 0) {
      DataId = other.DataId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Uid = input.ReadString();
          break;
        }
        case 16: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 24: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
        case 32: {
          SeatHeight = input.ReadInt32();
          break;
        }
        case 40: {
          BackDistance = input.ReadInt32();
          break;
        }
        case 48: {
          LeverLength = input.ReadInt32();
          break;
        }
        case 57: {
          LeverAngle = input.ReadDouble();
          break;
        }
        case 64: {
          ForwardLimit = input.ReadInt32();
          break;
        }
        case 72: {
          BackLimit = input.ReadInt32();
          break;
        }
        case 80: {
          trainMode_ = (global::TrainMode) input.ReadEnum();
          break;
        }
        case 88: {
          DefatModeEnable = input.ReadBool();
          break;
        }
        case 96: {
          PedalDistance = input.ReadInt32();
          break;
        }
        case 106: {
          DataId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///个人设置响应
/// </summary>
public sealed partial class PersonalSetResponse : pb::IMessage<PersonalSetResponse> {
  private static readonly pb::MessageParser<PersonalSetResponse> _parser = new pb::MessageParser<PersonalSetResponse>(() => new PersonalSetResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PersonalSetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BdlProtoReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetResponse(PersonalSetResponse other) : this() {
    deviceType_ = other.deviceType_;
    activityType_ = other.activityType_;
    uid_ = other.uid_;
    success_ = other.success_;
    dataId_ = other.dataId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PersonalSetResponse Clone() {
    return new PersonalSetResponse(this);
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 1;
  private global::DeviceType deviceType_ = 0;
  /// <summary>
  ///设备类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceType DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "activityType" field.</summary>
  public const int ActivityTypeFieldNumber = 2;
  private global::ActivityType activityType_ = 0;
  /// <summary>
  ///循环类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityType ActivityType {
    get { return activityType_; }
    set {
      activityType_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 3;
  private string uid_ = "";
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Uid {
    get { return uid_; }
    set {
      uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 4;
  private bool success_;
  /// <summary>
  ///响应结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "data_id" field.</summary>
  public const int DataIdFieldNumber = 5;
  private string dataId_ = "";
  /// <summary>
  ///安卓端的记录ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataId {
    get { return dataId_; }
    set {
      dataId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PersonalSetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PersonalSetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceType != other.DeviceType) return false;
    if (ActivityType != other.ActivityType) return false;
    if (Uid != other.Uid) return false;
    if (Success != other.Success) return false;
    if (DataId != other.DataId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
    if (Uid.Length != 0) hash ^= Uid.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (DataId.Length != 0) hash ^= DataId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DeviceType);
    }
    if (ActivityType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ActivityType);
    }
    if (Uid.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Uid);
    }
    if (Success != false) {
      output.WriteRawTag(32);
      output.WriteBool(Success);
    }
    if (DataId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DataId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (ActivityType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
    }
    if (Uid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (DataId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PersonalSetResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.ActivityType != 0) {
      ActivityType = other.ActivityType;
    }
    if (other.Uid.Length != 0) {
      Uid = other.Uid;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.DataId.Length != 0) {
      DataId = other.DataId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          deviceType_ = (global::DeviceType) input.ReadEnum();
          break;
        }
        case 16: {
          activityType_ = (global::ActivityType) input.ReadEnum();
          break;
        }
        case 26: {
          Uid = input.ReadString();
          break;
        }
        case 32: {
          Success = input.ReadBool();
          break;
        }
        case 42: {
          DataId = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
