<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario4"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:BasicInput"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="wideState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="720"/>
                    </VisualState.StateTriggers>
                </VisualState>
                <VisualState x:Name="narrowState">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="manipulateMe.Height" Value="150"/>
                        <Setter Target="manipulateMe.Width" Value="150"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <StackPanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Margin="12,10,12,12">
            <TextBlock Text="Description:" Style="{StaticResource SampleHeaderTextStyle}"/>
            <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap">
                This scenario demonstrates how to use the ManipulationMode property to register for specific manipuation events on XAML elements and how to listen for and react to these events, specifically the TranslateX, TranslateY, TranslateInertia, Rotate, and RotateInertia events. Through reacting to these events, the rectangle can be moved and rotated via direct user interaction.
            </TextBlock>
            <ComboBox Name="movementAxis" Header="Movement Axis" SelectionChanged="movementAxis_Changed" VerticalAlignment="Center" Margin="0,12,0,0">
                <ComboBoxItem Content="X and Y"/>
                <ComboBoxItem Content="X only"/>
                <ComboBoxItem Content="Y only"/>
            </ComboBox>
            <ToggleSwitch x:Name="inertiaSwitch" Header="Inertia" Margin="0,12,0,0" Toggled="InertiaSwitch_Toggled"/>
            <Button x:Name="resetButton" Content="Reset" Margin="0,12,0,0" Click="resetButton_Pressed"/>
            <Canvas ManipulationMode="None" Margin="0,12,0,0" MinHeight="400">
                <Border x:Name="manipulateMe" Background="LightGray" Height="200" Width="200"  ManipulationMode="All" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </Canvas>
        </StackPanel>
    </ScrollViewer>
</Page>
