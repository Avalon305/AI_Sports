<!-- 
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario3_ProportionalSpacing"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource ScenarioDescriptionTextStyle}">
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Margin" Value="0,0,0,20"/>
            </Style>
        </Grid.Resources>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <!-- Panels and image -->
                <VisualState x:Name="PanelsAndImage_Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="321"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RootGrid.MinWidth" Value="320"/>
                        <Setter Target="TextLayoutImage.Width" Value="300" />
                        <Setter Target="LineSpacingParameterControls.Padding" Value="0" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PanelsAndImage_Narrow">
                    <!-- For 320px phones -->
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RootGrid.MinWidth" Value="296"/>
                        <Setter Target="TextLayoutImage.Width" Value="280" />
                        <Setter Target="LineSpacingParameterControls.Padding" Value="0,0,12,0" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup>
                <!-- Color key -->
                <VisualState x:Name="ColorKey_Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="730"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="DescenderKey.(RelativePanel.AlignLeftWithPanel)" Value="false" />
                        <Setter Target="DescenderKey.(RelativePanel.Below)" Value="{x:Null}" />
                        <Setter Target="DescenderKey.(RelativePanel.RightOf)" Value="AscenderKey" />
                        <Setter Target="DescenderKey.(RelativePanel.AlignVerticalCenterWith)" Value="AscenderKey" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.AlignLeftWithPanel)" Value="false" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.Below)" Value="{x:Null}" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.RightOf)" Value="DescenderKey" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.AlignVerticalCenterWith)" Value="DescenderKey" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ColorKey_Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="DescenderKey.(RelativePanel.RightOf)" Value="{x:Null}" />
                        <Setter Target="DescenderKey.(RelativePanel.AlignVerticalCenterWith)" Value="{x:Null}" />
                        <Setter Target="DescenderKey.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="DescenderKey.(RelativePanel.Below)" Value="AscenderKey" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.RightOf)" Value="{x:Null}" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.AlignVerticalCenterWith)" Value="{x:Null}" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="AdditionalLeadingKey.(RelativePanel.Below)" Value="DescenderKey" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup>
                <!-- Preset buttons -->
                <VisualState x:Name="PresetButtons_Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="830"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="DoubleSpace.(Grid.Column)" Value="2" />
                        <Setter Target="DoubleSpace.(Grid.Row)" Value="0" />
                        <Setter Target="DoubleSpaceHalfLeading.(Grid.Column)" Value="3" />
                        <Setter Target="DoubleSpaceHalfLeading.(Grid.Row)" Value="0" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PresetButtons_Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="DoubleSpace.(Grid.Column)" Value="0" />
                        <Setter Target="DoubleSpace.(Grid.Row)" Value="1" />
                        <Setter Target="DoubleSpaceHalfLeading.(Grid.Column)" Value="1" />
                        <Setter Target="DoubleSpaceHalfLeading.(Grid.Row)" Value="1" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup>
                <!-- Input parameter and output image controls -->
                <VisualState x:Name="ParameterAndImage_Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="880"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LineSpacingParameterControls.(RelativePanel.AlignLeftWithPanel)" Value="False" />
                        <Setter Target="LineSpacingParameterControls.(RelativePanel.RightOf)" Value="TextLayoutImage" />
                        <Setter Target="TextLayoutImage.(RelativePanel.Below)" Value="{x:Null}" />
                        <Setter Target="TextLayoutImage.(RelativePanel.AlignTopWithPanel)" Value="True" />
                        <Setter Target="TextLayoutImage.Margin" Value="0,0,20,0" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ParameterAndImage_Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LineSpacingParameterControls.(RelativePanel.RightOf)" Value="{x:Null}" />
                        <Setter Target="LineSpacingParameterControls.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="TextLayoutImage.(RelativePanel.AlignTopWithPanel)" Value="False" />
                        <Setter Target="TextLayoutImage.(RelativePanel.Below)" Value="LineSpacingParameterControls" />
                        <Setter Target="TextLayoutImage.Margin" Value="0" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid x:Name="RootGrid" Margin="12,0,12,12" MinWidth="296" MaxWidth="800" HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- Scenario heading -->
            <StackPanel Margin="0,0,0,20">
                <TextBlock Text="Proportional spacing:" Style="{StaticResource SampleHeaderTextStyle}"/>
                <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap"
                           Text="Height and baseline scale factors set by the app are applied to the default
computed metrics of each line." />
            </StackPanel>

            <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto" Padding="8,8,16,8" Background="#FF303030" HorizontalAlignment="Stretch">
                <StackPanel HorizontalAlignment="Stretch" VerticalAlignment="Top">

                    <TextBlock Text="When the proportional line spacing method is used, the height, baseline and
leadingBefore members of the DWRITE_LINE_SPACING structure are all used. The height and baseline values are
scale factors applied to the default computed height and baseline of each line. A leadingBefore value from 0
to 1 determines the portion of extra leading in each line that is distributed before the line versus after the
line." />
                    <TextBlock Text="The most typical usage scenario for the proportional method is to provide
multiple spacing for some multiplier. For example, single spacing, double spacing, or 1.5&#xd7; spacing. For
these cases, assign the multiplier value to both height and baseline with leadingBefore set to zero. This will
increase the line height with proportional increases in the baseline distance as well as the distance below the
the baseline. You can adjust the leadingBefore value to shift some of the extra space from below the baseline to
be above the baseline. To implement CSS-style &#x201C;half-leading&#x201D; line-height, set the height to the
required multiple, leave baseline set to 1.0, and set leadingBefore to 0.5." />
                    <TextBlock Text="These are common use cases, but you may find other settings that suit your
needs. Experiment with the controls below to see how the different parameters interact. Note that, if the
baseline value is set greater than the height, then the computed line metrics will have negative leading before
or after. See below for the line metrics details of the first line of the text layout." />
                    <TextBlock Text="Note that the default computed height and baseline values for each line are
still the basis for computing line metrics when proportional spacing is used. So, the emoji character that is
drawn with a different font that has taller metrics can still cause the line it is in to have larger height.
The only way to ensure the same spacing on all lines is to use uniform spacing." />

                    <!-- Color key -->
                    <TextBlock Text="Color key" Margin="0,12,0,4" FontWeight="SemiBold"/>
                    <RelativePanel Margin="0,0,0,20" >
                        <StackPanel x:Name="AscenderKey" Orientation="Horizontal" Margin="0,0,12,4" 
                                  RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignTopWithPanel="True">
                            <Border Height="20" Width="20" VerticalAlignment="Top" Background="LightBlue" Margin="0,0,4,0" />
                            <TextBlock VerticalAlignment="Center" Text="Ascender" Margin="0" />
                        </StackPanel>
                        <StackPanel x:Name="DescenderKey" Orientation="Horizontal" Margin="0,0,12,4"
                                  RelativePanel.RightOf="AscenderKey" RelativePanel.AlignVerticalCenterWith="AscenderKey">
                            <Border Height="20" Width="20" VerticalAlignment="Center" Background="LightPink" Margin="0,0,4,0" />
                            <TextBlock VerticalAlignment="Center" Text="Descender" Margin="0" />
                        </StackPanel>
                        <StackPanel x:Name="AdditionalLeadingKey" Orientation="Horizontal" Margin="0,0,0,4"
                                  RelativePanel.RightOf="DescenderKey" RelativePanel.AlignVerticalCenterWith="DescenderKey">
                            <Border Height="20" Width="20" VerticalAlignment="Center" Background="LightYellow" Margin="0,0,4,0" />
                            <TextBlock VerticalAlignment="Center" Text="Additional leading" Margin="0" />
                        </StackPanel>
                    </RelativePanel>

                    <!-- Preset options -->
                    <TextBlock Text="Presets" Margin="0,12,0,4" FontWeight="SemiBold" />
                    <Grid Margin="0,0,0,20">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Button Name="SingleSpace" Content="1&#xd7; spacing" Margin="0,0,12,4" Click="SingleSpace_Click" 
                                Grid.Column="0" Grid.Row="0"/>
                        <Button Name="OneAndHalfSpace" Content="1.5&#xd7; spacing" Margin="0,0,12,4" Click="OneAndHalfSpace_Click" 
                                Grid.Column="1" Grid.Row="0"/>
                        <Button Name="DoubleSpace" Content="2&#xd7; spacing" Margin="0,0,12,4" Click="DoubleSpace_Click" 
                                Grid.Column="2" Grid.Row="0"/>
                        <Button Name="DoubleSpaceHalfLeading" Content="2&#xd7;, half-leading" Margin="0,0,12,4" Click="DoubleSpaceHalfLeading_Click" 
                                Grid.Column="3" Grid.Row="0"/>
                    </Grid>

                    <!-- Input parameters and visual results: relative arrangment will depend on width -->
                    <RelativePanel Margin="0,12,0,20" >
                        <!-- Line spacing parameter controls -->
                        <StackPanel Name="LineSpacingParameterControls" Orientation="Vertical" 
                                    RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignTopWithPanel="True" RelativePanel.AlignRightWithPanel="True" >
                            <TextBlock Text="Line spacing parameters" Margin="0,0,0,4" FontWeight="SemiBold" TextWrapping="NoWrap"/>
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Height:" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0,0,4,0"/>
                                    <TextBlock Text="{x:Bind Path=LineSpacingHeight}" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0" />
                                </StackPanel>
                                <Slider Name="HeightSlider" Minimum="0" Maximum="4" StepFrequency="0.01"
                                        Value="{x:Bind Path=LineSpacingHeight, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Baseline:" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0,0,4,0"/>
                                    <TextBlock Text="{x:Bind Path=LineSpacingBaseline}" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0" />
                                </StackPanel>
                                <Slider Name="BaselineSlider" Minimum="0" Maximum="4" StepFrequency="0.01"
                                        Value="{x:Bind Path=LineSpacingBaseline, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Leading before:" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0,0,4,0"/>
                                    <TextBlock Text="{x:Bind Path=LineSpacingLeadingBefore}" FontSize="{ThemeResource ControlContentThemeFontSize}" Margin="0" />
                                </StackPanel>
                                <Slider Name="LeadingBeforeSlider" Minimum="0" Maximum="1" StepFrequency="0.01"
                                        Value="{x:Bind Path=LineSpacingLeadingBefore, Mode=TwoWay}" />
                            </StackPanel>
                            <ToggleSwitch Name="FontLineGapUsageEnabled" Margin="0,0,0,20"
                                          Header="Line gap usage" OffContent="Disabled" OnContent="Enabled" 
                                          IsOn="{x:Bind Path=IsFontLineGapUsageEnabled, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Text layout results: The image source will be created programmatically using a SurfaceImageSource to present a DirectWrite text layout. -->
                        <Image Name="TextLayoutImage" Width="300" Height="260" HorizontalAlignment="Left" Margin="0"
                             RelativePanel.AlignLeftWithPanel="True" RelativePanel.Below="LineSpacingParameterControls"/>
                    </RelativePanel>

                    <!-- First line metrics results -->
                    <StackPanel Name="LineMetricsResultsControls" Orientation="Vertical" Margin="0">
                        <TextBlock Margin="0,0,0,4" Text="Computed metrics of first line (DWRITE_LINE_METRICS1 members):" TextWrapping="WrapWholeWords" />
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,4">
                            <TextBlock Margin="0,0,4,0" Text="height:" />
                            <TextBlock Margin="0" Text="{x:Bind Path=TextLayoutHeight}" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,4">
                            <TextBlock Margin="0,0,4,0" Text="baseline:" />
                            <TextBlock Margin="0" Text="{x:Bind Path=TextLayoutBaseline}" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,4">
                            <TextBlock Margin="0,0,4,0" Text="leadingBefore:" />
                            <TextBlock Margin="0" Text="{x:Bind Path=TextLayoutLeadingBefore}" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,0,0,4">
                            <TextBlock Margin="0,0,4,0" Text="leadingAfter:" />
                            <TextBlock Margin="0" Text="{x:Bind Path=TextLayoutLeadingAfter}" />
                        </StackPanel>
                    </StackPanel>

                </StackPanel>
            </ScrollViewer>
        </Grid>
    </Grid>
</Page>
