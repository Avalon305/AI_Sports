<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario12"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,0,0,10" >
                Apps may need to retrieve resources in non-UI threads. For example, if a large number of items are
                being processed (for instance, adding watermark text to a number of images using a template resource
                string), then a separate thread might be used to do this asynchronously so the UI isn't blocked.
            </TextBlock>
            <TextBlock x:Name="InputTextBlock2"  TextWrapping="Wrap" Grid.Row="1" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,0,0,10" >
                In the general case, however, resources can be qualified for scale or other view-dependent 
                qualifiers. But scale is ambiguous on a non-UI thread. For that reason, coding patterns to retrieve
                resources that work on a UI thread, using the GetForCurrentView() method on the ResourceLoader or
                ResourceContext class, will fail on a non-UI thread. Different coding patterns are needed.
            </TextBlock>
            <TextBlock x:Name="InputTextBlock3" TextWrapping="Wrap" Grid.Row="2" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,0,0,10">
                Two coding patterns are available. If the resources to be retrieved may be qualified for scale or
                other view-dependent qualifiers, then a ResourceLoader or ResourceContext object should be obtained 
                on the UI thread where the resources will be used, then passed to the non-UI thread. If the resources 
                are guaranteed not to use scale or other view-dependent qualifiers, then a view-independent 
                ResourceLoader or ResourceContext object can be obtained on the non-UI thread using the 
                GetForViewIndependentUse() method.
            </TextBlock>
            <TextBlock x:Name="InputTextBlock4" TextWrapping="Wrap" Grid.Row="3" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,0,0,10">
                Click the button below to show resources retrieved on a non-UI thread using the two coding patterns
                described above.
            </TextBlock>
            <Button x:Name="Scenario12Button_Show" Grid.Row="4"  Content="Show Results" Margin="0,0,10,0" Click="Scenario12Button_Show_Click"/>

        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <VariableSizedWrapGrid Grid.Row="0" Orientation="Horizontal" ItemWidth="260">
                <StackPanel Grid.Column="0" HorizontalAlignment="Left" Margin="0,10, 20, 0">
                    <TextBlock Style="{StaticResource BasicTextStyle}" x:Name="Scenario12TextBlock1" Text="View-dependent resources:" HorizontalAlignment="Left" />
                    <ItemsControl x:Name="ViewDependentResourcesList" HorizontalAlignment="Left" VerticalAlignment="Top" Height="300" Width="200" FontSize="16" />
                </StackPanel>
                <StackPanel Grid.Column="1" HorizontalAlignment="Left" Margin="0,10, 20, 0">
                    <TextBlock Style="{StaticResource BasicTextStyle}" x:Name="Scenario12TextBlock2" Text="View-independent resources:" HorizontalAlignment="Left" />
                    <ItemsControl x:Name="ViewIndependentResourcesList" HorizontalAlignment="Left" VerticalAlignment="Top" Height="300" Width="200" FontSize="16"/>
                </StackPanel>
            </VariableSizedWrapGrid>
        </Grid>
        
        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
