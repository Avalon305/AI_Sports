<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario13"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <StackPanel >
                <TextBlock Margin="0,0,0,10" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" >
                    Files deployed with your app can be accessed via code. An app file is referenced using an ms-appx URI. When file 
                    variants marked for language, DX feature level or other qualifiers are included, the ms-appx URI should be a reference
                    to the unqualified, logical resource.
                </TextBlock>
                <TextBlock Margin="0,0,0,10" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" >
                    This scenario demonstrates access via code of a file resource, appdata/appdata.dat. There are three variants of this
                    resource, using the DXFeatureLevel qualifier. The URI reference used is ms-appx:///appdata/appdata.dat.
                </TextBlock>
                <TextBlock Margin="0,0,0,10" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" >
                    Resource context values for some qualifiers, such as language or scale, are set automatically by the system. For
                    certain qualifiers, however, the app is expected to set context qualifier values as appropriate. The
                    DXFeatureLevel qualifier is like that. When an ms-appx URI is used to retrieve a file resource, the resource 
                    candidate is resolved using the default context of the thread in which the file is accessed. When using async APIs,
                    that file access may occur on a background thread. To ensure that the required DXFeatureLevel value is set on the 
                    default context used in the background thread, it should be set for the default context of all app threads using 
                    SetGlobalQualifierValue.
                </TextBlock>
                <TextBlock Margin="0,20,0,10" Text="Select a DXFeatureLevel value to set for the app:" Style="{StaticResource BasicTextStyle}" />
                <ComboBox x:Name="DXFLOptionCombo" Width="120" SelectedValuePath="Content" SelectionChanged="DXFLOptionCombo_SelectionChanged" HorizontalAlignment="Left">
                    <ComboBoxItem>DX9</ComboBoxItem>
                    <ComboBoxItem>DX10</ComboBoxItem>
                    <ComboBoxItem>DX11</ComboBoxItem>
                </ComboBox>
            </StackPanel>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0">
                <TextBlock Margin="0,0,0,10" Text="Data read from file:" Style="{StaticResource BasicTextStyle}" />
                <TextBlock x:Name="ResultText"  Style="{StaticResource BasicTextStyle}" />
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</Page>
