<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="SDKTemplate.Scenario9"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Margin="0,0,0,20"  Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                Applications, at times, may want to show some UI in different dimensions other than the default ones. Applications can be more explicit when loading resources by making a call to the current Windows.ApplicationModel.Resources.Core.ResourceManager with an overridden context. The overridden context then lets the application be more specific about the configuration and type of resource to load. Advanced functionality such as this is typically found in the Windows.ApplicationModel.Resources.Core namespace within the ResourceManager. The drop down below shows a set of languages linked to BCP-47 tags which get passed explicitly to the GetValue API.
            </TextBlock>
            
<TextBlock Text="To view a resource that has been loaded inline in a different language, choose the language below and click Show Message." Grid.Row="1" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"></TextBlock>
            <Grid Grid.Row="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150"/>
                    <ColumnDefinition Width="150"/>
                </Grid.ColumnDefinitions>
                <ComboBox Margin="10, 10, 0, 13" SelectedIndex="0" SelectedValuePath="Name"  Name="Scenario9ComboBox" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="106" Height="34" >
                    <ComboBoxItem Name="en">English</ComboBoxItem>
                    <ComboBoxItem Name="ja">Japanese</ComboBoxItem>
                </ComboBox>
                <Button x:Name="Scenario9Button_Show" Grid.Column="1" Content="Show Message" Margin="0,0,10,0" Click="Scenario9Button_Show_Click"/>
            </Grid>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Style="{StaticResource BasicTextStyle}" x:Name="Scenario9TextBlock" FontSize="20" TextWrapping="Wrap" />
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
