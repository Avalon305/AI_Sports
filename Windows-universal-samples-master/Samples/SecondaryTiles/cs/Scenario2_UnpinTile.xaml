<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page x:Class="SecondaryTiles.UnpinTile" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="using:SecondaryTiles" xmlns:common="using:SDKTemplate.Common" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">
  <Grid x:Name="LayoutRoot" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <TextBlock x:Name="InputText" TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,0,0,24" Width="267">
         In this scenario, we will unpin the tile that was pinned in scenario 1.
        If this were an actual application, we would first want to check whether
        the tile that we're unpinning exists. Please refer to scenario 4 for an
        example of how to check whether a tile exists. 
      </TextBlock>
      <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1">
        <Button x:Name="UnpinSecondaryTile" Content="Unpin from Start" Margin="0,0,10,0" Click="UnpinSecondaryTile_Click"/>
      </StackPanel>
    </Grid>
    <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1"> </Grid>
    <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState x:Name="DefaultLayout"/>
        <VisualState x:Name="Below768Layout"/>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>