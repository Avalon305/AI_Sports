<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->

<Page
    x:Class="SDKTemplate.Scenario3"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" Padding="12,10,12,12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0">
            <TextBlock Text="Description:" Style="{StaticResource SampleHeaderTextStyle}"/>
            <TextBlock Style="{StaticResource ScenarioDescriptionTextStyle}" TextWrapping="Wrap" Text="Client certificate"/>
            <TextBlock TextWrapping="Wrap" Margin="0,10,0,0">
                This scenario shows how to use a StreamWebSocket with a client certificate to connect to a server.
                The sample server (localhost) requires requires a secure WebSocket (wss://) connection with a client certificate.
                The StreamWebSocket client certificate property behaves the same as the MessageWebSocket client certificate property.
            </TextBlock>
            <TextBlock Text="Server Address:" Margin="0,10,0,0"/>
            <TextBox x:Name="ServerAddressField" InputScope="Url" Text="wss://localhost/WebSocketSample/EchoWebSocketWithClientAuthentication.ashx" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                <Button x:Name="ConnectButton" Content="Connect" Margin="0,0,10,0" Click="{x:Bind OnConnect}"/>
                <Button x:Name="DisconnectButton" Content="Disconnect" Margin="0,0,10,0" Click="{x:Bind OnDisconnect}"/>
            </StackPanel>
        </StackPanel>
        <ScrollViewer Grid.Row="1" VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto" Margin="0,10,0,0">
            <TextBox Name="OutputField" HorizontalAlignment="Stretch" TextWrapping="Wrap" IsReadOnly="True"/>
        </ScrollViewer>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="Disconnected">
                    <VisualState.Setters>
                        <Setter Target="DisconnectButton.IsEnabled" Value="False"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Connected">
                    <VisualState.Setters>
                        <Setter Target="ConnectButton.IsEnabled" Value="False"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Busy">
                    <VisualState.Setters>
                        <Setter Target="ConnectButton.IsEnabled" Value="False"/>
                        <Setter Target="DisconnectButton.IsEnabled" Value="False"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
